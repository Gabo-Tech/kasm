	.define SYS_PRINT_STRING li $v0, 6
	.macro PRINT_ADDRESS(address)
		.text
		SYS_PRINT_STRING
		la $a0, address
		sys
	.end
	.macro PRINT_STRING(string)
		.data
	string_address:
		.asciiz string
		.text
		#PRINT_ADDRESS(string_address)
		SYS_PRINT_STRING
		la $a0, string_address
		sys
	.end
	.macro READ_STRING(buffer_address, buffer_size)
		li $v0, 5
		la $a0, buffer_address
		li $a1, buffer_size
		sys
	.end
	.text
main:
	PRINT_STRING("bruh\n")
	
ask:
	PRINT_STRING("Would you like to type something? (y/n): ")
	li $v0, 3        # ans
	sys

	# no
	beq $a0, 'n', skip
	beq $a0, 'N', skip
	
	# yes
	beq $a0, 'y', yes
	beq $a0, 'Y', yes

	# invalid
	j ask

yes:
	PRINT_STRING("Type something\n> ")
	READ_STRING(msg, 32)
	PRINT_ADDRESS(msg)
	j ask
skip:
	PRINT_STRING("Thank you for running this program.\n")
	li $v0, 0   # systemCallType = EXIT
	jal func  # func()
	lw $a0, ret # exitCode = *ret
	li $t0, 1
	add $a0, $a0, $t0
	sys       # systemCall(systemCallType, exitCode)

# void func(void)
func:
	li $t0, 2   # tmp = 2
	sw $t0, ret # *ret = tmp
	jr $ra     # return

	.data
ret:
	.space 4   # reserve 1 word of space in memory
msg:
	#.byte ' ':32
	.space 32
some_trash:
	.word 4
	.byte 1
	.byte 2
	.word 3
	.byte 5
	.message "test"
	.include "more_data.kasm"
	.message "test2"
	.dbg ".dbg \".message \\\"fuck\\\"\""



