/* Generated by re2c 1.2.1 on Mon Oct 05 19:29:59 2020 */
#line 1 "assembler.cpp.re"
// A Bison parser, made by GNU Bison 3.4.1.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2019 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// Undocumented macros, especially those whose name start with YY_,
// are private implementation details.  Do not rely on them.





// //                    "%code requires" blocks.

#include "assembler.hpp"

#include <algorithm> // max
#include <exception>
#include <fstream>
#include <iostream>
#include <limits>
#include <string>
#include <variant>
#include <vector>

struct lexcontext;


# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>

#if defined __cplusplus
# define YY_CPLUSPLUS __cplusplus
#else
# define YY_CPLUSPLUS 199711L
#endif

// Support move semantics when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_MOVE           std::move
# define YY_MOVE_OR_COPY   move
# define YY_MOVE_REF(Type) Type&&
# define YY_RVREF(Type)    Type&&
# define YY_COPY(Type)     Type
#else
# define YY_MOVE
# define YY_MOVE_OR_COPY   copy
# define YY_MOVE_REF(Type) Type&
# define YY_RVREF(Type)    const Type&
# define YY_COPY(Type)     const Type&
#endif

// Support noexcept when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_NOEXCEPT noexcept
# define YY_NOTHROW
#else
# define YY_NOEXCEPT
# define YY_NOTHROW throw ()
#endif

// Support constexpr when possible.
#if 201703 <= YY_CPLUSPLUS
# define YY_CONSTEXPR constexpr
#else
# define YY_CONSTEXPR
#endif

#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

namespace yy {


  /// A point in a source file.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned l = 1u,
                       unsigned c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {}


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned l = 1u,
                     unsigned c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned line;
    /// Current column number.
    unsigned column;

  private:
    /// Compute max (min, lhs+rhs).
    static unsigned add_ (unsigned lhs, int rhs, int min)
    {
      return static_cast<unsigned> (std::max (min,
                                              static_cast<int> (lhs) + rhs));
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Two points in a source file.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {}

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {}

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned l = 1u,
                       unsigned c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {}


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned l = 1u,
                     unsigned c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A Bison parser.
  class parser
  {
  public:
#ifndef YYSTYPE
  /// A buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current parser state.
  class semantic_type
  {
  public:
    /// Type of *this.
    typedef semantic_type self_type;

    /// Empty construction.
    semantic_type () YY_NOEXCEPT
      : yybuffer_ ()
      , yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    semantic_type (YY_RVREF (T) t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= size);
      new (yyas_<T> ()) T (YY_MOVE (t));
    }

    /// Destruction, allowed only if empty.
    ~semantic_type () YY_NOEXCEPT
    {
      YYASSERT (!yytypeid_);
    }

# if 201103L <= YY_CPLUSPLUS
    /// Instantiate a \a T in here from \a t.
    template <typename T, typename... U>
    T&
    emplace (U&&... u)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (std::forward <U>(u)...);
    }
# else
    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    emplace ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T ();
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    emplace (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }
# endif

    /// Instantiate an empty \a T in here.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build ()
    {
      return emplace<T> ();
    }

    /// Instantiate a \a T in here from \a t.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build (const T& t)
    {
      return emplace<T> (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as () YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Swap the content with \a that, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsibility.
    /// Swapping between built and (possibly) non-built is done with
    /// self_type::move ().
    template <typename T>
    void
    swap (self_type& that) YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *that.yytypeid_);
      std::swap (as<T> (), that.as<T> ());
    }

    /// Move the content of \a that to this.
    ///
    /// Destroys \a that.
    template <typename T>
    void
    move (self_type& that)
    {
# if 201103L <= YY_CPLUSPLUS
      emplace<T> (std::move (that.as<T> ()));
# else
      emplace<T> ();
      swap<T> (that);
# endif
      that.destroy<T> ();
    }

# if 201103L <= YY_CPLUSPLUS
    /// Move the content of \a that to this.
    template <typename T>
    void
    move (self_type&& that)
    {
      emplace<T> (std::move (that.as<T> ()));
      that.destroy<T> ();
    }
#endif

    /// Copy the content of \a that to this.
    template <typename T>
    void
    copy (const self_type& that)
    {
      emplace<T> (that.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator= (const self_type&);
    semantic_type (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ () YY_NOEXCEPT
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const YY_NOEXCEPT
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // address
      char dummy1[sizeof (kasm::Address)];

      // IDENTIFIER
      // STRING
      char dummy2[sizeof (std::string)];

      // LITERAL
      // REGISTER
      char dummy3[sizeof (std::uint32_t)];

      // literal_argument
      // literal_list
      char dummy4[sizeof (std::vector<std::variant<std::uint32_t, kasm::Address>>)];
    };

    /// The size of the largest semantic type.
    enum { size = sizeof (union_type) };

    /// A buffer to store semantic values.
    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[size];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };

#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m)
        : std::runtime_error (m)
        , location (l)
      {}

      syntax_error (const syntax_error& s)
        : std::runtime_error (s.what ())
        , location (s.location)
      {}

      ~syntax_error () YY_NOEXCEPT YY_NOTHROW;

      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        END_OF_LINE = 258,
        IDENTIFIER = 259,
        LITERAL = 260,
        STRING = 261,
        REGISTER = 262,
        TEXT = 263,
        DATA = 264,
        WORD = 265,
        BYTE = 266,
        ASCII = 267,
        ASCIIZ = 268,
        ALIGN = 269,
        SPACE = 270,
        ADD = 271,
        ADDI = 272,
        ADDIU = 273,
        ADDU = 274,
        AND = 275,
        ANDI = 276,
        BEQ = 277,
        BGEZ = 278,
        BGEZAL = 279,
        BGTZ = 280,
        BLEZ = 281,
        BLTZ = 282,
        BLTZAL = 283,
        BNE = 284,
        DIV = 285,
        DIVU = 286,
        J = 287,
        JAL = 288,
        JR = 289,
        LB = 290,
        LUI = 291,
        LW = 292,
        MFHI = 293,
        MFLO = 294,
        MULT = 295,
        MULTU = 296,
        OR = 297,
        ORI = 298,
        SB = 299,
        SLL = 300,
        SLLV = 301,
        NOR = 302,
        SLT = 303,
        SLTI = 304,
        SLTIU = 305,
        SLTU = 306,
        SRA = 307,
        SRL = 308,
        SRLV = 309,
        SUB = 310,
        SUBU = 311,
        SW = 312,
        SYS = 313,
        XOR = 314,
        XORI = 315,
        JALR = 316,
        MOV = 317,
        CLR = 318,
        B = 319,
        BAL = 320,
        BGT = 321,
        BLT = 322,
        BGE = 323,
        BLE = 324,
        BGTU = 325,
        BEGZ = 326,
        REM = 327,
        LI = 328,
        LA = 329,
        NOP = 330,
        NOT = 331
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get ().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ()
        : value ()
        , location ()
      {}

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      basic_symbol (basic_symbol&& that);
#endif

      /// Copy constructor.
      basic_symbol (const basic_symbol& that);

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, location_type&& l)
        : Base (t)
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const location_type& l)
        : Base (t)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, kasm::Address&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const kasm::Address& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::string&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::string& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::uint32_t&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::uint32_t& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<std::variant<std::uint32_t, kasm::Address>>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<std::variant<std::uint32_t, kasm::Address>>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif

      /// Destroy the symbol.
      ~basic_symbol ()
      {
        clear ();
      }

      /// Destroy contents, and record that is empty.
      void clear ()
      {
        // User destructor.
        symbol_number_type yytype = this->type_get ();
        basic_symbol<Base>& yysym = *this;
        (void) yysym;
        switch (yytype)
        {
       default:
          break;
        }

        // Type destructor.
switch (yytype)
    {
      case 89: // address
        value.template destroy< kasm::Address > ();
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.template destroy< std::string > ();
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.template destroy< std::uint32_t > ();
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.template destroy< std::vector<std::variant<std::uint32_t, kasm::Address>> > ();
        break;

      default:
        break;
    }

        Base::clear ();
      }

      /// Whether empty.
      bool empty () const YY_NOEXCEPT;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
#if YY_CPLUSPLUS < 201103L
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& that);
#endif
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      by_type (by_type&& that);
#endif

      /// Copy constructor.
      by_type (const by_type& that);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The token.
      token_type token () const YY_NOEXCEPT;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    struct symbol_type : basic_symbol<by_type>
    {
      /// Superclass.
      typedef basic_symbol<by_type> super_type;

      /// Empty symbol.
      symbol_type () {}

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, location_type l)
        : super_type(token_type (tok), std::move (l))
      {
        YYASSERT (tok == token::END_OF_FILE || tok == token::END_OF_LINE || tok == token::TEXT || tok == token::DATA || tok == token::WORD || tok == token::BYTE || tok == token::ASCII || tok == token::ASCIIZ || tok == token::ALIGN || tok == token::SPACE || tok == token::ADD || tok == token::ADDI || tok == token::ADDIU || tok == token::ADDU || tok == token::AND || tok == token::ANDI || tok == token::BEQ || tok == token::BGEZ || tok == token::BGEZAL || tok == token::BGTZ || tok == token::BLEZ || tok == token::BLTZ || tok == token::BLTZAL || tok == token::BNE || tok == token::DIV || tok == token::DIVU || tok == token::J || tok == token::JAL || tok == token::JR || tok == token::LB || tok == token::LUI || tok == token::LW || tok == token::MFHI || tok == token::MFLO || tok == token::MULT || tok == token::MULTU || tok == token::OR || tok == token::ORI || tok == token::SB || tok == token::SLL || tok == token::SLLV || tok == token::NOR || tok == token::SLT || tok == token::SLTI || tok == token::SLTIU || tok == token::SLTU || tok == token::SRA || tok == token::SRL || tok == token::SRLV || tok == token::SUB || tok == token::SUBU || tok == token::SW || tok == token::SYS || tok == token::XOR || tok == token::XORI || tok == token::JALR || tok == token::MOV || tok == token::CLR || tok == token::B || tok == token::BAL || tok == token::BGT || tok == token::BLT || tok == token::BGE || tok == token::BLE || tok == token::BGTU || tok == token::BEGZ || tok == token::REM || tok == token::LI || tok == token::LA || tok == token::NOP || tok == token::NOT || tok == 58 || tok == 44 || tok == 43 || tok == 40 || tok == 41);
      }
#else
      symbol_type (int tok, const location_type& l)
        : super_type(token_type (tok), l)
      {
        YYASSERT (tok == token::END_OF_FILE || tok == token::END_OF_LINE || tok == token::TEXT || tok == token::DATA || tok == token::WORD || tok == token::BYTE || tok == token::ASCII || tok == token::ASCIIZ || tok == token::ALIGN || tok == token::SPACE || tok == token::ADD || tok == token::ADDI || tok == token::ADDIU || tok == token::ADDU || tok == token::AND || tok == token::ANDI || tok == token::BEQ || tok == token::BGEZ || tok == token::BGEZAL || tok == token::BGTZ || tok == token::BLEZ || tok == token::BLTZ || tok == token::BLTZAL || tok == token::BNE || tok == token::DIV || tok == token::DIVU || tok == token::J || tok == token::JAL || tok == token::JR || tok == token::LB || tok == token::LUI || tok == token::LW || tok == token::MFHI || tok == token::MFLO || tok == token::MULT || tok == token::MULTU || tok == token::OR || tok == token::ORI || tok == token::SB || tok == token::SLL || tok == token::SLLV || tok == token::NOR || tok == token::SLT || tok == token::SLTI || tok == token::SLTIU || tok == token::SLTU || tok == token::SRA || tok == token::SRL || tok == token::SRLV || tok == token::SUB || tok == token::SUBU || tok == token::SW || tok == token::SYS || tok == token::XOR || tok == token::XORI || tok == token::JALR || tok == token::MOV || tok == token::CLR || tok == token::B || tok == token::BAL || tok == token::BGT || tok == token::BLT || tok == token::BGE || tok == token::BLE || tok == token::BGTU || tok == token::BEGZ || tok == token::REM || tok == token::LI || tok == token::LA || tok == token::NOP || tok == token::NOT || tok == 58 || tok == 44 || tok == 43 || tok == 40 || tok == 41);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, std::string v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::IDENTIFIER || tok == token::STRING);
      }
#else
      symbol_type (int tok, const std::string& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::IDENTIFIER || tok == token::STRING);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, std::uint32_t v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::LITERAL || tok == token::REGISTER);
      }
#else
      symbol_type (int tok, const std::uint32_t& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::LITERAL || tok == token::REGISTER);
      }
#endif
    };

    /// Build a parser object.
    parser (lexcontext& ctx_yyarg);
    virtual ~parser ();

    /// Parse.  An alias for parse ().
    /// \returns  0 iff parsing succeeded.
    int operator() ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

    // Implementation of make_symbol for each symbol type.
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END_OF_FILE (location_type l)
      {
        return symbol_type (token::END_OF_FILE, std::move (l));
      }
#else
      static
      symbol_type
      make_END_OF_FILE (const location_type& l)
      {
        return symbol_type (token::END_OF_FILE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END_OF_LINE (location_type l)
      {
        return symbol_type (token::END_OF_LINE, std::move (l));
      }
#else
      static
      symbol_type
      make_END_OF_LINE (const location_type& l)
      {
        return symbol_type (token::END_OF_LINE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IDENTIFIER (std::string v, location_type l)
      {
        return symbol_type (token::IDENTIFIER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_IDENTIFIER (const std::string& v, const location_type& l)
      {
        return symbol_type (token::IDENTIFIER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LITERAL (std::uint32_t v, location_type l)
      {
        return symbol_type (token::LITERAL, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_LITERAL (const std::uint32_t& v, const location_type& l)
      {
        return symbol_type (token::LITERAL, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRING (std::string v, location_type l)
      {
        return symbol_type (token::STRING, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_STRING (const std::string& v, const location_type& l)
      {
        return symbol_type (token::STRING, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_REGISTER (std::uint32_t v, location_type l)
      {
        return symbol_type (token::REGISTER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_REGISTER (const std::uint32_t& v, const location_type& l)
      {
        return symbol_type (token::REGISTER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TEXT (location_type l)
      {
        return symbol_type (token::TEXT, std::move (l));
      }
#else
      static
      symbol_type
      make_TEXT (const location_type& l)
      {
        return symbol_type (token::TEXT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DATA (location_type l)
      {
        return symbol_type (token::DATA, std::move (l));
      }
#else
      static
      symbol_type
      make_DATA (const location_type& l)
      {
        return symbol_type (token::DATA, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_WORD (location_type l)
      {
        return symbol_type (token::WORD, std::move (l));
      }
#else
      static
      symbol_type
      make_WORD (const location_type& l)
      {
        return symbol_type (token::WORD, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BYTE (location_type l)
      {
        return symbol_type (token::BYTE, std::move (l));
      }
#else
      static
      symbol_type
      make_BYTE (const location_type& l)
      {
        return symbol_type (token::BYTE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASCII (location_type l)
      {
        return symbol_type (token::ASCII, std::move (l));
      }
#else
      static
      symbol_type
      make_ASCII (const location_type& l)
      {
        return symbol_type (token::ASCII, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASCIIZ (location_type l)
      {
        return symbol_type (token::ASCIIZ, std::move (l));
      }
#else
      static
      symbol_type
      make_ASCIIZ (const location_type& l)
      {
        return symbol_type (token::ASCIIZ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ALIGN (location_type l)
      {
        return symbol_type (token::ALIGN, std::move (l));
      }
#else
      static
      symbol_type
      make_ALIGN (const location_type& l)
      {
        return symbol_type (token::ALIGN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SPACE (location_type l)
      {
        return symbol_type (token::SPACE, std::move (l));
      }
#else
      static
      symbol_type
      make_SPACE (const location_type& l)
      {
        return symbol_type (token::SPACE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ADD (location_type l)
      {
        return symbol_type (token::ADD, std::move (l));
      }
#else
      static
      symbol_type
      make_ADD (const location_type& l)
      {
        return symbol_type (token::ADD, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ADDI (location_type l)
      {
        return symbol_type (token::ADDI, std::move (l));
      }
#else
      static
      symbol_type
      make_ADDI (const location_type& l)
      {
        return symbol_type (token::ADDI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ADDIU (location_type l)
      {
        return symbol_type (token::ADDIU, std::move (l));
      }
#else
      static
      symbol_type
      make_ADDIU (const location_type& l)
      {
        return symbol_type (token::ADDIU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ADDU (location_type l)
      {
        return symbol_type (token::ADDU, std::move (l));
      }
#else
      static
      symbol_type
      make_ADDU (const location_type& l)
      {
        return symbol_type (token::ADDU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AND (location_type l)
      {
        return symbol_type (token::AND, std::move (l));
      }
#else
      static
      symbol_type
      make_AND (const location_type& l)
      {
        return symbol_type (token::AND, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ANDI (location_type l)
      {
        return symbol_type (token::ANDI, std::move (l));
      }
#else
      static
      symbol_type
      make_ANDI (const location_type& l)
      {
        return symbol_type (token::ANDI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BEQ (location_type l)
      {
        return symbol_type (token::BEQ, std::move (l));
      }
#else
      static
      symbol_type
      make_BEQ (const location_type& l)
      {
        return symbol_type (token::BEQ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BGEZ (location_type l)
      {
        return symbol_type (token::BGEZ, std::move (l));
      }
#else
      static
      symbol_type
      make_BGEZ (const location_type& l)
      {
        return symbol_type (token::BGEZ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BGEZAL (location_type l)
      {
        return symbol_type (token::BGEZAL, std::move (l));
      }
#else
      static
      symbol_type
      make_BGEZAL (const location_type& l)
      {
        return symbol_type (token::BGEZAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BGTZ (location_type l)
      {
        return symbol_type (token::BGTZ, std::move (l));
      }
#else
      static
      symbol_type
      make_BGTZ (const location_type& l)
      {
        return symbol_type (token::BGTZ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BLEZ (location_type l)
      {
        return symbol_type (token::BLEZ, std::move (l));
      }
#else
      static
      symbol_type
      make_BLEZ (const location_type& l)
      {
        return symbol_type (token::BLEZ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BLTZ (location_type l)
      {
        return symbol_type (token::BLTZ, std::move (l));
      }
#else
      static
      symbol_type
      make_BLTZ (const location_type& l)
      {
        return symbol_type (token::BLTZ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BLTZAL (location_type l)
      {
        return symbol_type (token::BLTZAL, std::move (l));
      }
#else
      static
      symbol_type
      make_BLTZAL (const location_type& l)
      {
        return symbol_type (token::BLTZAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BNE (location_type l)
      {
        return symbol_type (token::BNE, std::move (l));
      }
#else
      static
      symbol_type
      make_BNE (const location_type& l)
      {
        return symbol_type (token::BNE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DIV (location_type l)
      {
        return symbol_type (token::DIV, std::move (l));
      }
#else
      static
      symbol_type
      make_DIV (const location_type& l)
      {
        return symbol_type (token::DIV, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DIVU (location_type l)
      {
        return symbol_type (token::DIVU, std::move (l));
      }
#else
      static
      symbol_type
      make_DIVU (const location_type& l)
      {
        return symbol_type (token::DIVU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_J (location_type l)
      {
        return symbol_type (token::J, std::move (l));
      }
#else
      static
      symbol_type
      make_J (const location_type& l)
      {
        return symbol_type (token::J, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_JAL (location_type l)
      {
        return symbol_type (token::JAL, std::move (l));
      }
#else
      static
      symbol_type
      make_JAL (const location_type& l)
      {
        return symbol_type (token::JAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_JR (location_type l)
      {
        return symbol_type (token::JR, std::move (l));
      }
#else
      static
      symbol_type
      make_JR (const location_type& l)
      {
        return symbol_type (token::JR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LB (location_type l)
      {
        return symbol_type (token::LB, std::move (l));
      }
#else
      static
      symbol_type
      make_LB (const location_type& l)
      {
        return symbol_type (token::LB, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LUI (location_type l)
      {
        return symbol_type (token::LUI, std::move (l));
      }
#else
      static
      symbol_type
      make_LUI (const location_type& l)
      {
        return symbol_type (token::LUI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LW (location_type l)
      {
        return symbol_type (token::LW, std::move (l));
      }
#else
      static
      symbol_type
      make_LW (const location_type& l)
      {
        return symbol_type (token::LW, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MFHI (location_type l)
      {
        return symbol_type (token::MFHI, std::move (l));
      }
#else
      static
      symbol_type
      make_MFHI (const location_type& l)
      {
        return symbol_type (token::MFHI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MFLO (location_type l)
      {
        return symbol_type (token::MFLO, std::move (l));
      }
#else
      static
      symbol_type
      make_MFLO (const location_type& l)
      {
        return symbol_type (token::MFLO, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MULT (location_type l)
      {
        return symbol_type (token::MULT, std::move (l));
      }
#else
      static
      symbol_type
      make_MULT (const location_type& l)
      {
        return symbol_type (token::MULT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MULTU (location_type l)
      {
        return symbol_type (token::MULTU, std::move (l));
      }
#else
      static
      symbol_type
      make_MULTU (const location_type& l)
      {
        return symbol_type (token::MULTU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OR (location_type l)
      {
        return symbol_type (token::OR, std::move (l));
      }
#else
      static
      symbol_type
      make_OR (const location_type& l)
      {
        return symbol_type (token::OR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ORI (location_type l)
      {
        return symbol_type (token::ORI, std::move (l));
      }
#else
      static
      symbol_type
      make_ORI (const location_type& l)
      {
        return symbol_type (token::ORI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SB (location_type l)
      {
        return symbol_type (token::SB, std::move (l));
      }
#else
      static
      symbol_type
      make_SB (const location_type& l)
      {
        return symbol_type (token::SB, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SLL (location_type l)
      {
        return symbol_type (token::SLL, std::move (l));
      }
#else
      static
      symbol_type
      make_SLL (const location_type& l)
      {
        return symbol_type (token::SLL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SLLV (location_type l)
      {
        return symbol_type (token::SLLV, std::move (l));
      }
#else
      static
      symbol_type
      make_SLLV (const location_type& l)
      {
        return symbol_type (token::SLLV, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOR (location_type l)
      {
        return symbol_type (token::NOR, std::move (l));
      }
#else
      static
      symbol_type
      make_NOR (const location_type& l)
      {
        return symbol_type (token::NOR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SLT (location_type l)
      {
        return symbol_type (token::SLT, std::move (l));
      }
#else
      static
      symbol_type
      make_SLT (const location_type& l)
      {
        return symbol_type (token::SLT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SLTI (location_type l)
      {
        return symbol_type (token::SLTI, std::move (l));
      }
#else
      static
      symbol_type
      make_SLTI (const location_type& l)
      {
        return symbol_type (token::SLTI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SLTIU (location_type l)
      {
        return symbol_type (token::SLTIU, std::move (l));
      }
#else
      static
      symbol_type
      make_SLTIU (const location_type& l)
      {
        return symbol_type (token::SLTIU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SLTU (location_type l)
      {
        return symbol_type (token::SLTU, std::move (l));
      }
#else
      static
      symbol_type
      make_SLTU (const location_type& l)
      {
        return symbol_type (token::SLTU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SRA (location_type l)
      {
        return symbol_type (token::SRA, std::move (l));
      }
#else
      static
      symbol_type
      make_SRA (const location_type& l)
      {
        return symbol_type (token::SRA, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SRL (location_type l)
      {
        return symbol_type (token::SRL, std::move (l));
      }
#else
      static
      symbol_type
      make_SRL (const location_type& l)
      {
        return symbol_type (token::SRL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SRLV (location_type l)
      {
        return symbol_type (token::SRLV, std::move (l));
      }
#else
      static
      symbol_type
      make_SRLV (const location_type& l)
      {
        return symbol_type (token::SRLV, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SUB (location_type l)
      {
        return symbol_type (token::SUB, std::move (l));
      }
#else
      static
      symbol_type
      make_SUB (const location_type& l)
      {
        return symbol_type (token::SUB, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SUBU (location_type l)
      {
        return symbol_type (token::SUBU, std::move (l));
      }
#else
      static
      symbol_type
      make_SUBU (const location_type& l)
      {
        return symbol_type (token::SUBU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SW (location_type l)
      {
        return symbol_type (token::SW, std::move (l));
      }
#else
      static
      symbol_type
      make_SW (const location_type& l)
      {
        return symbol_type (token::SW, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SYS (location_type l)
      {
        return symbol_type (token::SYS, std::move (l));
      }
#else
      static
      symbol_type
      make_SYS (const location_type& l)
      {
        return symbol_type (token::SYS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_XOR (location_type l)
      {
        return symbol_type (token::XOR, std::move (l));
      }
#else
      static
      symbol_type
      make_XOR (const location_type& l)
      {
        return symbol_type (token::XOR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_XORI (location_type l)
      {
        return symbol_type (token::XORI, std::move (l));
      }
#else
      static
      symbol_type
      make_XORI (const location_type& l)
      {
        return symbol_type (token::XORI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_JALR (location_type l)
      {
        return symbol_type (token::JALR, std::move (l));
      }
#else
      static
      symbol_type
      make_JALR (const location_type& l)
      {
        return symbol_type (token::JALR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MOV (location_type l)
      {
        return symbol_type (token::MOV, std::move (l));
      }
#else
      static
      symbol_type
      make_MOV (const location_type& l)
      {
        return symbol_type (token::MOV, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLR (location_type l)
      {
        return symbol_type (token::CLR, std::move (l));
      }
#else
      static
      symbol_type
      make_CLR (const location_type& l)
      {
        return symbol_type (token::CLR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_B (location_type l)
      {
        return symbol_type (token::B, std::move (l));
      }
#else
      static
      symbol_type
      make_B (const location_type& l)
      {
        return symbol_type (token::B, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BAL (location_type l)
      {
        return symbol_type (token::BAL, std::move (l));
      }
#else
      static
      symbol_type
      make_BAL (const location_type& l)
      {
        return symbol_type (token::BAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BGT (location_type l)
      {
        return symbol_type (token::BGT, std::move (l));
      }
#else
      static
      symbol_type
      make_BGT (const location_type& l)
      {
        return symbol_type (token::BGT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BLT (location_type l)
      {
        return symbol_type (token::BLT, std::move (l));
      }
#else
      static
      symbol_type
      make_BLT (const location_type& l)
      {
        return symbol_type (token::BLT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BGE (location_type l)
      {
        return symbol_type (token::BGE, std::move (l));
      }
#else
      static
      symbol_type
      make_BGE (const location_type& l)
      {
        return symbol_type (token::BGE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BLE (location_type l)
      {
        return symbol_type (token::BLE, std::move (l));
      }
#else
      static
      symbol_type
      make_BLE (const location_type& l)
      {
        return symbol_type (token::BLE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BGTU (location_type l)
      {
        return symbol_type (token::BGTU, std::move (l));
      }
#else
      static
      symbol_type
      make_BGTU (const location_type& l)
      {
        return symbol_type (token::BGTU, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BEGZ (location_type l)
      {
        return symbol_type (token::BEGZ, std::move (l));
      }
#else
      static
      symbol_type
      make_BEGZ (const location_type& l)
      {
        return symbol_type (token::BEGZ, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_REM (location_type l)
      {
        return symbol_type (token::REM, std::move (l));
      }
#else
      static
      symbol_type
      make_REM (const location_type& l)
      {
        return symbol_type (token::REM, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LI (location_type l)
      {
        return symbol_type (token::LI, std::move (l));
      }
#else
      static
      symbol_type
      make_LI (const location_type& l)
      {
        return symbol_type (token::LI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LA (location_type l)
      {
        return symbol_type (token::LA, std::move (l));
      }
#else
      static
      symbol_type
      make_LA (const location_type& l)
      {
        return symbol_type (token::LA, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOP (location_type l)
      {
        return symbol_type (token::NOP, std::move (l));
      }
#else
      static
      symbol_type
      make_NOP (const location_type& l)
      {
        return symbol_type (token::NOP, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOT (location_type l)
      {
        return symbol_type (token::NOT, std::move (l));
      }
#else
      static
      symbol_type
      make_NOT (const location_type& l)
      {
        return symbol_type (token::NOT, l);
      }
#endif


  private:
    /// This class is not copyable.
    parser (const parser&);
    parser& operator= (const parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const signed char yypact_ninf_;
    static const signed char yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned char yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short yytable_[];

  static const short yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned char yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned char yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    /// Debugging level.
    int yydebug_;
    /// Debug stream.
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state () YY_NOEXCEPT;

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s) YY_NOEXCEPT;

      /// Copy constructor.
      by_state (const by_state& that) YY_NOEXCEPT;

      /// Record that this symbol is empty.
      void clear () YY_NOEXCEPT;

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Move or copy construction.
      stack_symbol_type (YY_RVREF (stack_symbol_type) that);
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) sym);
#if YY_CPLUSPLUS < 201103L
      /// Assignment, needed by push_back by some old implementations.
      /// Moves the contents of that.
      stack_symbol_type& operator= (stack_symbol_type& that);
#endif
    };

    /// A stack with random access from its top.
    template <typename T, typename S = std::vector<T> >
    class stack
    {
    public:
      // Hide our reversed order.
      typedef typename S::reverse_iterator iterator;
      typedef typename S::const_reverse_iterator const_iterator;
      typedef typename S::size_type size_type;

      stack (size_type n = 200)
        : seq_ (n)
      {}

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (size_type i)
      {
        return seq_[size () - 1 - i];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (int i)
      {
        return operator[] (size_type (i));
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (size_type i) const
      {
        return seq_[size () - 1 - i];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (int i) const
      {
        return operator[] (size_type (i));
      }

      /// Steal the contents of \a t.
      ///
      /// Close to move-semantics.
      void
      push (YY_MOVE_REF (T) t)
      {
        seq_.push_back (T ());
        operator[] (0).move (t);
      }

      /// Pop elements from the stack.
      void
      pop (int n = 1) YY_NOEXCEPT
      {
        for (; 0 < n; --n)
          seq_.pop_back ();
      }

      /// Pop all elements from the stack.
      void
      clear () YY_NOEXCEPT
      {
        seq_.clear ();
      }

      /// Number of elements on the stack.
      size_type
      size () const YY_NOEXCEPT
      {
        return seq_.size ();
      }

      /// Iterator on top of the stack (going downwards).
      const_iterator
      begin () const YY_NOEXCEPT
      {
        return seq_.rbegin ();
      }

      /// Bottom of the stack.
      const_iterator
      end () const YY_NOEXCEPT
      {
        return seq_.rend ();
      }

      /// Present a slice of the top of a stack.
      class slice
      {
      public:
        slice (const stack& stack, int range)
          : stack_ (stack)
          , range_ (range)
        {}

        const T&
        operator[] (int i) const
        {
          return stack_[range_ - i];
        }

      private:
        const stack& stack_;
        int range_;
      };

    private:
      stack (const stack&);
      stack& operator= (const stack&);
      /// The wrapped container.
      S seq_;
    };


    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param sym  the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a sym.value is stolen.
    void yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym);

    /// Pop \a n symbols from the stack.
    void yypop_ (int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 538,     ///< Last index in yytable_.
      yynnts_ = 9,  ///< Number of nonterminal symbols.
      yyfinal_ = 2, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 82  ///< Number of tokens.
    };


    // User arguments.
    lexcontext& ctx;
  };

  parser::token_number_type
  parser::yytranslate_ (token_type t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const token_number_type
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      80,    81,     2,    79,    78,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    77,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76
    };
    const unsigned user_token_number_max_ = 331;
    const token_number_type undef_token_ = 2;

    if (static_cast<int> (t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  // basic_symbol.
#if 201103L <= YY_CPLUSPLUS
  template <typename Base>
  parser::basic_symbol<Base>::basic_symbol (basic_symbol&& that)
    : Base (std::move (that))
    , value ()
    , location (std::move (that.location))
  {
    switch (this->type_get ())
    {
      case 89: // address
        value.move< kasm::Address > (std::move (that.value));
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.move< std::string > (std::move (that.value));
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.move< std::uint32_t > (std::move (that.value));
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.move< std::vector<std::variant<std::uint32_t, kasm::Address>> > (std::move (that.value));
        break;

      default:
        break;
    }

  }
#endif

  template <typename Base>
  parser::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value ()
    , location (that.location)
  {
    switch (this->type_get ())
    {
      case 89: // address
        value.copy< kasm::Address > (YY_MOVE (that.value));
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.copy< std::string > (YY_MOVE (that.value));
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.copy< std::uint32_t > (YY_MOVE (that.value));
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.copy< std::vector<std::variant<std::uint32_t, kasm::Address>> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

  }



  template <typename Base>
  bool
  parser::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  void
  parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    switch (this->type_get ())
    {
      case 89: // address
        value.move< kasm::Address > (YY_MOVE (s.value));
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.move< std::string > (YY_MOVE (s.value));
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.move< std::uint32_t > (YY_MOVE (s.value));
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.move< std::vector<std::variant<std::uint32_t, kasm::Address>> > (YY_MOVE (s.value));
        break;

      default:
        break;
    }

    location = YY_MOVE (s.location);
  }

  // by_type.
  parser::by_type::by_type ()
    : type (empty_symbol)
  {}

#if 201103L <= YY_CPLUSPLUS
  parser::by_type::by_type (by_type&& that)
    : type (that.type)
  {
    that.clear ();
  }
#endif

  parser::by_type::by_type (const by_type& that)
    : type (that.type)
  {}

  parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  void
  parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  void
  parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  int
  parser::by_type::type_get () const YY_NOEXCEPT
  {
    return type;
  }

  parser::token_type
  parser::by_type::token () const YY_NOEXCEPT
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,    58,    44,    43,
      40,    41
    };
    return token_type (yytoken_number_[type]);
  }

} // yy







// Unqualified %code blocks.

struct lexcontext
{
	const char* cursor;
	yy::location loc;
    kasm::Assembler* assembler;
};

namespace yy { parser::symbol_type yylex(lexcontext& ctx); }

#define INSTRUCTION_RRR(op, r0, r1, r2) {                           \
	kasm::InstructionData instructionData;                          \
	instructionData.opcode = kasm::Opcode::##op;                    \
	instructionData.register0 = r0;                                 \
	instructionData.register1 = r1;                                 \
	instructionData.register2 = r2;                                 \
	ctx.assembler->binary.writeWord(instructionData.instruction); } \

#define INSTRUCTION_RRL(op, r0, r1, l) {                            \
	kasm::InstructionData instructionData;                          \
	instructionData.opcode = kasm::Opcode::##op;                    \
	instructionData.register0 = r0;                                 \
	instructionData.register1 = r1;                                 \
	instructionData.immediate = l;                                  \
	ctx.assembler->binary.writeWord(instructionData.instruction); } \

#define INSTRUCTION_RRA(op, r0, r1, a, t) {                                                              \
	kasm::InstructionData instructionData;                                                               \
	instructionData.opcode = kasm::Opcode::##op;                                                         \
	instructionData.register0 = r0;                                                                      \
	instructionData.register1 = r1;                                                                      \
	a.type = kasm::AddressType::##t;                                                                     \
	a.instructionData = instructionData;                                                                 \
	instructionData.instruction = ctx.assembler->resolveAddress(ctx.assembler->binary.getLocation(), a); \
	ctx.assembler->binary.writeWord(instructionData.instruction); }                                      \

#define INSTRUCTION_RR(op, r0, r1) {                                \
	kasm::InstructionData instructionData;                          \
	instructionData.opcode = kasm::Opcode::##op;                    \
	instructionData.register0 = r0;                                 \
	instructionData.register1 = r1;                                 \
	ctx.assembler->binary.writeWord(instructionData.instruction); } \

#define INSTRUCTION_RL(op, r0, l) {                                 \
	kasm::InstructionData instructionData;                          \
	instructionData.opcode = kasm::Opcode::##op;                    \
	instructionData.register0 = r0;                                 \
	instructionData.immediate = l;                                  \
	ctx.assembler->binary.writeWord(instructionData.instruction); } \

#define INSTRUCTION_RA(op, r0, a, t) {                                                                   \
	kasm::InstructionData instructionData;                                                               \
	instructionData.opcode = kasm::Opcode::##op;                                                         \
	instructionData.register0 = r0;                                                                      \
	a.type = kasm::AddressType::##t;                                                                     \
	a.instructionData = instructionData;                                                                 \
	instructionData.instruction = ctx.assembler->resolveAddress(ctx.assembler->binary.getLocation(), a); \
	ctx.assembler->binary.writeWord(instructionData.instruction); }                                      \

#define INSTRUCTION_R(op, r0) {                                     \
	kasm::InstructionData instructionData;                          \
	instructionData.opcode = kasm::Opcode::##op;                    \
	instructionData.register0 = r0;                                 \
	ctx.assembler->binary.writeWord(instructionData.instruction); } \

#define INSTRUCTION_A(op, a, t) {                                                                        \
	kasm::InstructionData instructionData;                                                               \
	instructionData.opcode = kasm::Opcode::##op;                                                         \
	a.type = kasm::AddressType::##t;                                                                     \
	a.instructionData = instructionData;                                                                 \
	instructionData.instruction = ctx.assembler->resolveAddress(ctx.assembler->binary.getLocation(), a); \
	ctx.assembler->binary.writeWord(instructionData.instruction); }                                      \

#define INSTRUCTION_O(op) {                                         \
	kasm::InstructionData instructionData;                          \
	instructionData.opcode = kasm::Opcode::##op;                    \
	ctx.assembler->binary.writeWord(instructionData.instruction); } \

union SplitWord
{
	std::uint32_t value;
#pragma pack(push, 1)
#if 'ABCD' == 0x41424344 // if little endian. trash code TODO: make portable
	struct
	{
		std::uint32_t lo : kasm::IMMEDIATE_BIT;
		std::uint32_t hi : kasm::IMMEDIATE_BIT;
	};
#else
	struct
	{
		std::uint32_t hi : kasm::IMMEDIATE_BIT;
		std::uint32_t lo : kasm::IMMEDIATE_BIT;
	};
#endif
#pragma pack(pop)
};




#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)

namespace yy {


  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr;
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              else
                goto append;

            append:
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  parser::parser (lexcontext& ctx_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      ctx (ctx_yyarg)
  {}

  parser::~parser ()
  {}

  parser::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  parser::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  parser::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  parser::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  parser::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  parser::symbol_number_type
  parser::by_state::type_get () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  parser::stack_symbol_type::stack_symbol_type ()
  {}

  parser::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 89: // address
        value.YY_MOVE_OR_COPY< kasm::Address > (YY_MOVE (that.value));
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.YY_MOVE_OR_COPY< std::string > (YY_MOVE (that.value));
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.YY_MOVE_OR_COPY< std::uint32_t > (YY_MOVE (that.value));
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.YY_MOVE_OR_COPY< std::vector<std::variant<std::uint32_t, kasm::Address>> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  parser::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 89: // address
        value.move< kasm::Address > (YY_MOVE (that.value));
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.move< std::string > (YY_MOVE (that.value));
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.move< std::uint32_t > (YY_MOVE (that.value));
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.move< std::vector<std::variant<std::uint32_t, kasm::Address>> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

#if YY_CPLUSPLUS < 201103L
  parser::stack_symbol_type&
  parser::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    switch (that.type_get ())
    {
      case 89: // address
        value.move< kasm::Address > (that.value);
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        value.move< std::string > (that.value);
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        value.move< std::uint32_t > (that.value);
        break;

      case 87: // literal_argument
      case 88: // literal_list
        value.move< std::vector<std::variant<std::uint32_t, kasm::Address>> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
#if defined __GNUC__ && ! defined __clang__ && ! defined __ICC && __GNUC__ * 100 + __GNUC_MINOR__ <= 408
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
#endif
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  void
  parser::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  parser::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  parser::yypop_ (int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  parser::debug_level_type
  parser::debug_level () const
  {
    return yydebug_;
  }

  void
  parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  parser::state_type
  parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  bool
  parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  parser::operator() ()
  {
    return parse ();
  }

  int
  parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << '\n';

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            symbol_type yylookahead (yylex (ctx));
            yyla.move (yylookahead);
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, YY_MOVE (yyla));
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
      switch (yyr1_[yyn])
    {
      case 89: // address
        yylhs.value.emplace< kasm::Address > ();
        break;

      case 4: // IDENTIFIER
      case 6: // STRING
        yylhs.value.emplace< std::string > ();
        break;

      case 5: // LITERAL
      case 7: // REGISTER
        yylhs.value.emplace< std::uint32_t > ();
        break;

      case 87: // literal_argument
      case 88: // literal_list
        yylhs.value.emplace< std::vector<std::variant<std::uint32_t, kasm::Address>> > ();
        break;

      default:
        break;
    }


      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 4:
    { ctx.assembler->defineLabel(yystack_[1].value.as < std::string > (), ctx.assembler->binary.getLocation()); }
    break;

  case 6:
    { ctx.assembler->defineLabel(yystack_[1].value.as < std::string > (), ctx.assembler->binary.getLocation()); }
    break;

  case 9:
    { INSTRUCTION_O(TEXT); }
    break;

  case 10:
    { INSTRUCTION_O(DATA); }
    break;

  case 11:
    {
        ctx.assembler->binary.align(kasm::INSTRUCTION_SIZE);
        for (std::variant<std::uint32_t, kasm::Address> word : yystack_[1].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > ())
		{
			if(std::holds_alternative<kasm::Address>(word))
			{
				kasm::Address addr = std::get<kasm::Address>(word);
				addr.type = kasm::AddressType::DirectAddressAbsoluteWord;
				word = ctx.assembler->resolveAddress(ctx.assembler->binary.getLocation(), addr);
			}
            ctx.assembler->binary.writeWord(std::get<std::uint32_t>(word));
        }
    }
    break;

  case 12:
    {
        for (std::variant<std::uint32_t, kasm::Address> byte : yystack_[1].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > ())
        {
			if(std::holds_alternative<kasm::Address>(byte))
			{
				kasm::Address addr = std::get<kasm::Address>(byte);
				addr.type = kasm::AddressType::DirectAddressAbsoluteByte;
				byte = ctx.assembler->resolveAddress(ctx.assembler->binary.getLocation(), addr);
			}
            ctx.assembler->binary.writeByte(static_cast<std::uint8_t>(std::get<std::uint32_t>(byte)));
        }
    }
    break;

  case 13:
    { ctx.assembler->binary.writeString(yystack_[1].value.as < std::string > ().c_str(), yystack_[1].value.as < std::string > ().size()); }
    break;

  case 14:
    { ctx.assembler->binary.writeString(yystack_[1].value.as < std::string > ().c_str(), yystack_[1].value.as < std::string > ().size() + 1); }
    break;

  case 15:
    {
        unsigned int alignment = 1;
        for (int i = 0; i < yystack_[1].value.as < std::uint32_t > (); i++)
        {
            alignment *= 2;
        }
        ctx.assembler->binary.align(alignment);
    }
    break;

  case 16:
    { ctx.assembler->binary.pad(yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 17:
    { INSTRUCTION_RRR(ADD, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 18:
    { INSTRUCTION_RRL(ADDI, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 19:
    { INSTRUCTION_RRL(ADDIU, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 20:
    { INSTRUCTION_RRR(ADDU, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 21:
    { INSTRUCTION_RRR(AND, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 22:
    { INSTRUCTION_RRL(ANDI, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 23:
    { INSTRUCTION_RRA(BEQ, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 24:
    { INSTRUCTION_RA(BGEZ, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 25:
    { INSTRUCTION_RA(BGEZAL, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 26:
    { INSTRUCTION_RA(BGTZ, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 27:
    { INSTRUCTION_RA(BLEZ, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 28:
    { INSTRUCTION_RA(BLTZ, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 29:
    { INSTRUCTION_RA(BLTZAL, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 30:
    { INSTRUCTION_RRA(BNE, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 31:
    { INSTRUCTION_RR(DIV, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 32:
    { INSTRUCTION_RR(DIVU, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 33:
    { INSTRUCTION_A(J, yystack_[1].value.as < kasm::Address > (), DirectAddressAbsolute); }
    break;

  case 34:
    { INSTRUCTION_A(JAL, yystack_[1].value.as < kasm::Address > (), DirectAddressAbsolute); }
    break;

  case 35:
    { INSTRUCTION_R(JR, yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 36:
    { INSTRUCTION_RA(LB, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), IndirectAddressAbsolute); }
    break;

  case 37:
    { INSTRUCTION_RL(LUI, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 38:
    { INSTRUCTION_RA(LW, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), IndirectAddressAbsolute); }
    break;

  case 39:
    { INSTRUCTION_R(MFHI, yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 40:
    { INSTRUCTION_R(MFLO, yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 41:
    { INSTRUCTION_RR(MULT, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 42:
    { INSTRUCTION_RR(MULTU, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 43:
    { INSTRUCTION_RRR(OR, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 44:
    { INSTRUCTION_RRL(OR, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 45:
    { INSTRUCTION_RA(SB, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), IndirectAddressAbsolute); }
    break;

  case 46:
    { INSTRUCTION_RRL(SLL, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 47:
    { INSTRUCTION_RRR(SLLV, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 48:
    { INSTRUCTION_RRR(SLLV, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 49:
    { INSTRUCTION_RRL(SLTI, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 50:
    { INSTRUCTION_RRL(SLTIU, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 51:
    { INSTRUCTION_RRR(SLTU, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 52:
    { INSTRUCTION_RRL(SRA, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 53:
    { INSTRUCTION_RRL(SRL, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 54:
    { INSTRUCTION_RRR(SRLV, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 55:
    { INSTRUCTION_RRR(SUB, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 56:
    { INSTRUCTION_RRR(SUBU, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 57:
    { INSTRUCTION_RA(SB, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < kasm::Address > (), IndirectAddressAbsolute); }
    break;

  case 58:
    { INSTRUCTION_O(SYS); }
    break;

  case 59:
    { INSTRUCTION_RRR(XOR, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 60:
    { INSTRUCTION_RRL(XORI, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 61:
    { INSTRUCTION_RR(JALR, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 62:
    { INSTRUCTION_RRR(NOR, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 63:
    { INSTRUCTION_RRL(OR, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > (), kasm::ZERO); }
    break;

  case 64:
    { INSTRUCTION_RRL(OR, yystack_[1].value.as < std::uint32_t > (), kasm::ZERO, kasm::ZERO); }
    break;

  case 65:
    { INSTRUCTION_RRL(ADDI, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); }
    break;

  case 66:
    { INSTRUCTION_RR(JALR, yystack_[1].value.as < std::uint32_t > (), kasm::RA); }
    break;

  case 67:
    { INSTRUCTION_RRL(SLL, kasm::ZERO, kasm::ZERO, 0); }
    break;

  case 68:
    { INSTRUCTION_RRA(BEQ, kasm::ZERO, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 69:
    { INSTRUCTION_RA(BGEZAL, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 70:
    { INSTRUCTION_RRR(SLT, kasm::AT, yystack_[3].value.as < std::uint32_t > (), yystack_[5].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BNE, kasm::AT, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 71:
    { INSTRUCTION_RRR(SLT, kasm::AT, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BNE, kasm::AT, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 72:
    { INSTRUCTION_RRR(SLT, kasm::AT, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BEQ, kasm::AT, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 73:
    { INSTRUCTION_RRR(SLT, kasm::AT, yystack_[3].value.as < std::uint32_t > (), yystack_[5].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BEQ, kasm::AT, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 74:
    { INSTRUCTION_RRR(SLTU, kasm::AT, yystack_[5].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BEQ, kasm::AT, kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 75:
    { INSTRUCTION_RRA(BEQ, yystack_[3].value.as < std::uint32_t > (), kasm::ZERO, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 76:
    { INSTRUCTION_RRL(ORI, kasm::AT, kasm::ZERO, yystack_[3].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BEQ, yystack_[5].value.as < std::uint32_t > (), kasm::AT, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 77:
    { INSTRUCTION_RRL(ORI, kasm::AT, kasm::ZERO, yystack_[3].value.as < std::uint32_t > ()); INSTRUCTION_RRA(BNE, yystack_[5].value.as < std::uint32_t > (), kasm::AT, yystack_[1].value.as < kasm::Address > (), DirectAddressOffset); }
    break;

  case 78:
    { INSTRUCTION_RR(MULT, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); INSTRUCTION_R(MFLO, yystack_[5].value.as < std::uint32_t > ()); }
    break;

  case 79:
    { INSTRUCTION_RR(DIV, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); INSTRUCTION_R(MFLO, yystack_[5].value.as < std::uint32_t > ()); }
    break;

  case 80:
    { INSTRUCTION_RR(DIV, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > ()); INSTRUCTION_R(MFHI, yystack_[5].value.as < std::uint32_t > ()); }
    break;

  case 81:
    { INSTRUCTION_RRR(NOR, yystack_[3].value.as < std::uint32_t > (), yystack_[1].value.as < std::uint32_t > (), kasm::ZERO); }
    break;

  case 82:
    {
		SplitWord l = {yystack_[1].value.as < std::uint32_t > ()};
		
		if (l.hi)
		{
			INSTRUCTION_RL(LUI, yystack_[3].value.as < std::uint32_t > (), l.hi);
			INSTRUCTION_RRL(ORI, yystack_[3].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), l.lo);
		}
		else
		{
			INSTRUCTION_RRL(ORI, yystack_[3].value.as < std::uint32_t > (), kasm::ZERO, l.lo);
		}
	}
    break;

  case 83:
    {
		yystack_[1].value.as < kasm::Address > ().type = kasm::AddressType::DirectAddressAbsoluteLoad;
		yystack_[1].value.as < kasm::Address > ().reg = yystack_[3].value.as < std::uint32_t > ();
		yystack_[1].value.as < kasm::Address > ().instructionData.instruction = 0;
		SplitWord l = { ctx.assembler->resolveAddress(ctx.assembler->binary.getLocation(), yystack_[1].value.as < kasm::Address > ()) };
		if (l.value)
		{
			INSTRUCTION_RL(LUI, yystack_[3].value.as < std::uint32_t > (), l.hi);
			INSTRUCTION_RRL(ORI, yystack_[3].value.as < std::uint32_t > (), yystack_[3].value.as < std::uint32_t > (), l.lo);
		}
		else
		{
			ctx.assembler->binary.pad(kasm::INSTRUCTION_SIZE * 2);
		}
	}
    break;

  case 84:
    { yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = yystack_[0].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > (); }
    break;

  case 85:
    { yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = std::vector<std::variant<std::uint32_t, kasm::Address>>(yystack_[0].value.as < std::uint32_t > (), yystack_[2].value.as < std::uint32_t > ()); }
    break;

  case 86:
    { yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = std::vector<std::variant<std::uint32_t, kasm::Address>>(yystack_[0].value.as < std::uint32_t > (), kasm::Address{kasm::AddressType::Invalid, yystack_[2].value.as < std::string > ()}); }
    break;

  case 87:
    { yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = std::vector<std::variant<std::uint32_t, kasm::Address>>(yystack_[0].value.as < std::uint32_t > (), kasm::Address{kasm::AddressType::Invalid, yystack_[4].value.as < std::string > (), yystack_[2].value.as < std::uint32_t > ()}); }
    break;

  case 88:
    { yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = {yystack_[0].value.as < std::uint32_t > ()}; }
    break;

  case 89:
    { yystack_[2].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > ().push_back(yystack_[0].value.as < std::uint32_t > ()); yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = yystack_[2].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > (); }
    break;

  case 90:
    { yystack_[2].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > ().push_back(kasm::Address{kasm::AddressType::Invalid, yystack_[0].value.as < std::string > ()}); yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = yystack_[2].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > (); }
    break;

  case 91:
    { yystack_[4].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > ().push_back(kasm::Address{kasm::AddressType::Invalid, yystack_[2].value.as < std::string > (), yystack_[0].value.as < std::uint32_t > ()}); yylhs.value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > () = yystack_[4].value.as < std::vector<std::variant<std::uint32_t, kasm::Address>> > (); }
    break;

  case 92:
    {
		kasm::Address addr = {};
		addr.label = yystack_[0].value.as < std::string > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;

  case 93:
    {
		kasm::Address addr = {};
		addr.label = yystack_[2].value.as < std::string > ();
		addr.offset = yystack_[0].value.as < std::uint32_t > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;

  case 94:
    {
		kasm::Address addr = {};
		addr.reg = yystack_[1].value.as < std::uint32_t > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;

  case 95:
    {
		kasm::Address addr = {};
		addr.offset = yystack_[3].value.as < std::uint32_t > ();
		addr.reg = yystack_[1].value.as < std::uint32_t > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;

  case 96:
    {
		kasm::Address addr = {};
		addr.label = yystack_[3].value.as < std::string > ();
		addr.reg = yystack_[1].value.as < std::uint32_t > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;

  case 97:
    {
		kasm::Address addr = {};
		addr.offset = yystack_[5].value.as < std::uint32_t > () + yystack_[3].value.as < std::uint32_t > ();
		addr.reg = yystack_[1].value.as < std::uint32_t > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;

  case 98:
    {
		kasm::Address addr = {};
		addr.label = yystack_[5].value.as < std::string > ();
		addr.offset = yystack_[3].value.as < std::uint32_t > ();
		addr.reg = yystack_[1].value.as < std::uint32_t > ();
		yylhs.value.as < kasm::Address > () = addr;
	}
    break;



            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  // Generate an error message.
  std::string
  parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
      default: // Avoid compiler warnings.
        YYCASE_ (0, YY_("syntax error"));
        YYCASE_ (1, YY_("syntax error, unexpected %s"));
        YYCASE_ (2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_ (3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_ (4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_ (5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const signed char parser::yypact_ninf_ = -77;

  const signed char parser::yytable_ninf_ = -7;

  const short
  parser::yypact_[] =
  {
     -77,   388,   -77,   -77,   -55,    10,    10,    20,    20,    29,
      30,    27,    32,    31,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    43,    44,    45,    46,    47,    48,    11,
      11,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    69,
      78,    79,    81,    82,    83,    10,    85,    86,    87,    88,
      89,     7,    11,    90,    91,    92,    93,    97,    98,    99,
     102,    10,   103,   -77,   111,   -77,   -77,   -77,   -77,   -76,
     -38,    10,    42,    10,    10,    10,    10,    10,    58,    71,
      72,    73,    74,    75,    76,    77,    80,    94,    95,    96,
     100,   101,   105,   106,   -53,   -51,   107,    10,    10,    10,
     108,   109,   110,    10,    10,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   -77,   131,   132,     4,   133,    10,   134,
      10,    10,   135,   136,   137,   138,   139,   140,   141,   142,
     -77,   143,   462,   121,   151,   152,   154,   -77,    26,   -77,
     -77,   -77,   -77,   -77,   156,   157,   158,   159,   160,   161,
      12,    11,    11,    11,    11,    11,    11,    13,   163,   164,
     170,   169,   172,   173,   104,   -77,   -77,   -77,    11,   176,
      11,   -77,   -77,   215,   216,   217,   218,    11,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      11,   237,   238,   241,   -77,   242,   -77,    11,   -77,   -77,
     243,   244,   245,   251,   252,   254,   257,    11,   256,   -77,
     -77,   -77,    84,   -77,   185,   -77,   187,   188,   189,   190,
     191,   192,   193,   194,    10,    10,    10,    10,    10,    10,
     201,   202,     5,    10,   204,   200,   208,   209,   -77,    10,
      10,    10,     6,    10,   211,   213,    10,   214,   231,   232,
     233,   234,   235,   236,   239,   246,   247,   248,   249,    10,
     250,   253,    10,    10,    10,   255,   258,   259,   260,   261,
     262,    10,    10,    10,   288,   289,    16,   290,   291,   292,
     293,   296,    11,    11,   -77,   -77,   -77,   -77,   -77,   -77,
      11,    11,   295,   -77,   -77,   297,   -77,   298,   -77,   -77,
     -77,   -77,   299,   -77,   -77,   300,   303,   -77,   310,   309,
     316,   322,   325,   327,   328,   329,   336,   335,   337,   338,
     -77,   339,   342,   -77,   -77,   -77,    11,    11,    11,    11,
      11,   341,   -77,   -77,   -77,   -77,   -77,    10,    10,    10,
      10,    10,    10,    10,    10,    10,    10,    10,    10,   268,
     269,    10,    10,    10,    10,    10,    10,    10,    10,    10,
      10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
      10,    10,    10,    10,   -77,   -77,   -77,   -77,   -77,   -77,
     -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
     -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
     -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
     -77
  };

  const unsigned char
  parser::yydefact_[] =
  {
       3,     0,     1,     8,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     4,   100,    99,     9,    10,     0,
      88,     0,    84,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    58,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      67,     0,     0,     0,     0,     0,     0,    11,     0,    12,
      13,    14,    15,    16,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    33,    34,    35,     0,     0,
       0,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    66,     0,    64,     0,    68,    69,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       7,    86,     0,    85,    90,    89,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    93,     0,     0,     0,    94,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    25,    26,    27,    28,    29,
       0,     0,     0,    31,    32,     0,    96,     0,    95,    36,
      37,    38,     0,    41,    42,     0,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      57,     0,     0,    61,    63,    75,     0,     0,     0,     0,
       0,     0,    82,    83,    81,    87,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    17,    18,    19,    20,    21,
      22,    76,    23,    77,    30,    79,    98,    97,    78,    43,
      44,    46,    47,    62,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    59,    60,    70,    71,    72,    73,    74,
      80
  };

  const short
  parser::yypgoto_[] =
  {
     -77,   -77,   -40,   -77,   -77,   355,   -77,   -28,    -6
  };

  const short
  parser::yydefgoto_[] =
  {
      -1,     1,    73,   152,   153,    81,    82,   107,    77
  };

  const short
  parser::yytable_[] =
  {
      78,   154,   108,   155,    75,    75,    75,    76,    76,    76,
      75,   104,   105,    76,   139,   104,   105,   242,   250,   243,
     251,   357,    74,   358,    79,    80,   180,   181,   182,   183,
     234,   235,    86,   140,   141,    84,    85,    87,    88,   156,
      89,    90,    91,    92,    93,    94,    95,    96,    97,   133,
      98,    99,   100,   101,   102,   103,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   150,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   157,   127,   159,   160,   161,
     162,   163,   213,   312,   322,   128,   129,   106,   130,   131,
     132,   106,   134,   135,   136,   137,   138,   142,   143,   144,
     145,   185,   186,   187,   146,   147,   148,   191,   192,   149,
     151,    -6,   229,     0,   184,     0,     0,     0,     0,     0,
     158,   230,     0,     0,     0,     0,     0,     0,     0,     0,
     214,     0,   216,     0,   218,   219,   164,     0,     0,     0,
       0,     0,     0,   244,   245,   246,   247,   248,   249,   165,
     166,   167,   168,   169,   170,   171,   231,   232,   172,   233,
     259,   294,   261,   236,   237,   238,   239,   240,   241,   266,
     252,   253,   173,   174,   175,   254,   255,   256,   176,   177,
     257,   260,   279,   178,   179,   258,   188,   189,   190,   284,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   292,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   215,   217,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   262,   263,   264,   265,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   304,   305,
     306,   307,   308,   309,   280,   281,   313,   314,   282,   283,
     285,   286,   287,   319,   320,   321,   323,   324,   288,   289,
     327,   290,   291,   293,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   340,   364,   365,   343,   344,   345,   310,
     311,   316,   366,   367,   315,   352,   353,   354,   317,   325,
     318,   326,   328,   355,   356,   359,   360,     0,     0,   361,
     362,   363,   368,     0,   369,   370,   371,   372,   373,   329,
     330,   331,   332,   333,   334,   374,   375,   335,   388,   389,
     390,   391,   392,   376,   336,   337,   338,   339,   341,   377,
     378,   342,   379,   346,   381,   380,   347,   348,   349,   350,
     351,   382,   383,     0,   384,   385,   386,   387,   393,   406,
     407,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    83,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,     2,     0,
       0,     3,     4,     0,     0,     0,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68,    69,    70,    71,    72,     3,     4,     0,     0,     0,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    69,    70,    71,    72
  };

  const short
  parser::yycheck_[] =
  {
       6,    77,    30,    79,     0,     0,     0,     3,     3,     3,
       0,     4,     5,     3,     7,     4,     5,     5,     5,     7,
       7,     5,    77,     7,     4,     5,    79,    80,    79,    80,
       4,     5,     5,    61,    62,     6,     6,     5,     7,    77,
       7,     7,     7,     7,     7,     7,     7,     7,     7,    55,
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
       7,     7,     7,     7,     7,    71,     7,     7,     7,     7,
       7,     7,     7,     7,     7,    81,     7,    83,    84,    85,
      86,    87,    78,    78,    78,     7,     7,    80,     7,     7,
       7,    80,     7,     7,     7,     7,     7,     7,     7,     7,
       7,   107,   108,   109,     7,     7,     7,   113,   114,     7,
       7,     0,   152,    -1,     7,    -1,    -1,    -1,    -1,    -1,
      78,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,   138,    -1,   140,   141,    78,    -1,    -1,    -1,
      -1,    -1,    -1,   171,   172,   173,   174,   175,   176,    78,
      78,    78,    78,    78,    78,    78,     5,     5,    78,     5,
     188,    77,   190,     7,     7,     7,     7,     7,     7,   197,
       7,     7,    78,    78,    78,     5,     7,     5,    78,    78,
       7,     5,   210,    78,    78,    81,    78,    78,    78,   217,
      78,    78,    78,    78,    78,    78,    78,    78,    78,   227,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,     7,     7,     7,     7,     7,     7,     7,     7,
       7,     7,     7,     7,     7,     7,     7,     7,   244,   245,
     246,   247,   248,   249,     7,     7,   252,   253,     7,     7,
       7,     7,     7,   259,   260,   261,   262,   263,     7,     7,
     266,     7,     5,     7,    79,    78,    78,    78,    78,    78,
      78,    78,    78,   279,   302,   303,   282,   283,   284,    78,
      78,    81,   310,   311,    80,   291,   292,   293,    80,    78,
      81,    78,    78,     5,     5,     5,     5,    -1,    -1,     7,
       7,     5,     7,    -1,     7,     7,     7,     7,     5,    78,
      78,    78,    78,    78,    78,     5,     7,    78,   346,   347,
     348,   349,   350,     7,    78,    78,    78,    78,    78,     7,
       5,    78,     5,    78,     5,     7,    78,    78,    78,    78,
      78,     5,     7,    -1,     7,     7,     7,     5,     7,    81,
      81,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     8,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,    -1,
      -1,     3,     4,    -1,    -1,    -1,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,     3,     4,    -1,    -1,    -1,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76
  };

  const unsigned char
  parser::yystos_[] =
  {
       0,    83,     0,     3,     4,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    72,    73,
      74,    75,    76,    84,    77,     0,     3,    90,    90,     4,
       5,    87,    88,    87,     6,     6,     5,     5,     7,     7,
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
       7,     7,     7,     7,     4,     5,    80,    89,    89,     7,
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
       7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
       7,     7,     7,    90,     7,     7,     7,     7,     7,     7,
      89,    89,     7,     7,     7,     7,     7,     7,     7,     7,
      90,     7,    85,    86,    77,    79,    77,    90,    78,    90,
      90,    90,    90,    90,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      79,    80,    79,    80,     7,    90,    90,    90,    78,    78,
      78,    90,    90,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    90,    78,    90,    78,    90,    90,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    84,
       0,     5,     5,     5,     4,     5,     7,     7,     7,     7,
       7,     7,     5,     7,    89,    89,    89,    89,    89,    89,
       5,     7,     7,     7,     5,     7,     5,     7,    81,    89,
       5,    89,     7,     7,     7,     7,    89,     7,     7,     7,
       7,     7,     7,     7,     7,     7,     7,     7,     7,    89,
       7,     7,     7,     7,    89,     7,     7,     7,     7,     7,
       7,     5,    89,     7,    77,    79,    78,    78,    78,    78,
      78,    78,    78,    78,    90,    90,    90,    90,    90,    90,
      78,    78,    78,    90,    90,    80,    81,    80,    81,    90,
      90,    90,    78,    90,    90,    78,    78,    90,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      90,    78,    78,    90,    90,    90,    78,    78,    78,    78,
      78,    78,    90,    90,    90,     5,     5,     5,     7,     5,
       5,     7,     7,     5,    89,    89,    89,    89,     7,     7,
       7,     7,     7,     5,     5,     7,     7,     7,     5,     5,
       7,     5,     5,     7,     7,     7,     7,     5,    89,    89,
      89,    89,    89,     7,    90,    90,    90,    90,    90,    90,
      90,    90,    90,    90,    90,    90,    81,    81,    90,    90,
      90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
      90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
      90
  };

  const unsigned char
  parser::yyr1_[] =
  {
       0,    82,    83,    83,    85,    84,    86,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    84,    87,    87,    87,    87,    88,    88,
      88,    88,    89,    89,    89,    89,    89,    89,    89,    90,
      90
  };

  const unsigned char
  parser::yyr2_[] =
  {
       0,     2,     2,     0,     0,     4,     0,     4,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     7,     7,     7,
       7,     7,     7,     7,     5,     5,     5,     5,     5,     5,
       7,     5,     5,     3,     3,     3,     5,     5,     5,     3,
       3,     5,     5,     7,     7,     5,     7,     7,     7,     7,
       7,     7,     7,     7,     7,     7,     7,     5,     2,     7,
       7,     5,     7,     5,     3,     7,     3,     2,     3,     3,
       7,     7,     7,     7,     7,     5,     7,     7,     7,     7,
       7,     5,     5,     5,     1,     3,     3,     5,     1,     3,
       3,     5,     1,     3,     3,     4,     4,     6,     6,     1,
       1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "END_OF_LINE", "IDENTIFIER",
  "LITERAL", "STRING", "REGISTER", "TEXT", "DATA", "WORD", "BYTE", "ASCII",
  "ASCIIZ", "ALIGN", "SPACE", "ADD", "ADDI", "ADDIU", "ADDU", "AND",
  "ANDI", "BEQ", "BGEZ", "BGEZAL", "BGTZ", "BLEZ", "BLTZ", "BLTZAL", "BNE",
  "DIV", "DIVU", "J", "JAL", "JR", "LB", "LUI", "LW", "MFHI", "MFLO",
  "MULT", "MULTU", "OR", "ORI", "SB", "SLL", "SLLV", "NOR", "SLT", "SLTI",
  "SLTIU", "SLTU", "SRA", "SRL", "SRLV", "SUB", "SUBU", "SW", "SYS", "XOR",
  "XORI", "JALR", "MOV", "CLR", "B", "BAL", "BGT", "BLT", "BGE", "BLE",
  "BGTU", "BEGZ", "REM", "LI", "LA", "NOP", "NOT", "':'", "','", "'+'",
  "'('", "')'", "$accept", "statement_list", "statement", "$@1", "$@2",
  "literal_argument", "literal_list", "address", "end_of_statement", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short
  parser::yyrline_[] =
  {
       0,   154,   154,   155,   159,   159,   160,   160,   161,   163,
     164,   165,   179,   192,   193,   194,   203,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   287,   306,   307,   308,   309,   313,   314,
     315,   316,   320,   326,   333,   339,   346,   353,   360,   371,
     372
  };

  // Print the state stack on the debug stream.
  void
  parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << '\n';
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  parser::yy_reduce_print_ (int yyrule)
  {
    unsigned yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG


} // yy



std::uint32_t resolveRegisterName(const std::string& registerName)
{
	const static std::unordered_map<std::string, kasm::Register> REGISTER_NAMES = {
		{ "zero", kasm::ZERO },
		{ "at", kasm::AT },
		{ "v0", kasm::V0 }, { "v1", kasm::V1 },
		{ "a0", kasm::A0 }, { "a1", kasm::A1 }, { "a2", kasm::A2 }, { "a3", kasm::A3 },
		{ "t0", kasm::T0 }, { "t1", kasm::T1 }, { "t2", kasm::T2 }, { "t3", kasm::T3 }, { "t4", kasm::T4 }, { "t5", kasm::T5 }, { "t6", kasm::T6 }, { "t7", kasm::T7 },
		{ "s0", kasm::S0 }, { "s1", kasm::S1 }, { "s2", kasm::S2 }, { "s3", kasm::S3 }, { "s4", kasm::S4 }, { "s5", kasm::S5 }, { "s6", kasm::S6 }, { "s7", kasm::S7 },
		{ "t8", kasm::T8 }, { "t9", kasm::T9 },
		{ "k0", kasm::K0 }, { "k1", kasm::K1 },
		{ "gp", kasm::GP },
		{ "sp", kasm::SP },
		{ "fp", kasm::FP },
		{ "ra", kasm::RA }
	};

	return REGISTER_NAMES.at(registerName);
}

yy::parser::symbol_type yy::yylex(lexcontext& ctx)
{
    const char* YYMARKER;
    const char* anchor = ctx.cursor;
#define walk() { ctx.loc.columns(ctx.cursor - anchor); }
#define advance() { anchor = ctx.cursor; ctx.loc.step(); goto init; }
#define token(name) { walk(); return parser::make_##name(ctx.loc); }
#define tokenv(name, ...) { walk(); return parser::make_##name(__VA_ARGS__, ctx.loc); }
    #line 411 "assembler.yy"

init:
	
#line 4568 "assembler.cpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *ctx.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '"':	goto yy11;
	case '#':	goto yy13;
	case '$':	goto yy16;
	case '\'':	goto yy17;
	case '+':
	case '-':	goto yy18;
	case '.':	goto yy19;
	case '0':	goto yy20;
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy22;
	case 'A':	goto yy24;
	case 'B':	goto yy26;
	case 'C':	goto yy28;
	case 'D':	goto yy29;
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'K':
	case 'P':
	case 'Q':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'Y':
	case 'Z':
	case '_':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'k':
	case 'p':
	case 'q':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'y':
	case 'z':	goto yy30;
	case 'J':	goto yy32;
	case 'L':	goto yy34;
	case 'M':	goto yy35;
	case 'N':	goto yy36;
	case 'O':	goto yy37;
	case 'R':	goto yy38;
	case 'S':	goto yy39;
	case 'X':	goto yy40;
	case 'a':	goto yy41;
	case 'b':	goto yy42;
	case 'c':	goto yy43;
	case 'd':	goto yy44;
	case 'j':	goto yy45;
	case 'l':	goto yy46;
	case 'm':	goto yy47;
	case 'n':	goto yy48;
	case 'o':	goto yy49;
	case 'r':	goto yy50;
	case 's':	goto yy51;
	case 'x':	goto yy52;
	default:	goto yy4;
	}
yy2:
	++ctx.cursor;
#line 508 "assembler.yy"
	{ token(END_OF_FILE); }
#line 4658 "assembler.cpp"
yy4:
	++ctx.cursor;
yy5:
#line 514 "assembler.yy"
	{ walk(); return parser::symbol_type(parser::token_type(ctx.cursor[-1] & 0xFF), ctx.loc); }
#line 4664 "assembler.cpp"
yy6:
	++ctx.cursor;
#line 507 "assembler.yy"
	{ ctx.loc.columns(); advance(); }
#line 4669 "assembler.cpp"
yy8:
	++ctx.cursor;
yy9:
#line 506 "assembler.yy"
	{ ctx.loc.lines(); ctx.loc.step(); token(END_OF_LINE); }
#line 4675 "assembler.cpp"
yy10:
	yych = *++ctx.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy9;
	}
yy11:
	yych = *++ctx.cursor;
	switch (yych) {
	case '"':	goto yy53;
	default:	goto yy11;
	}
yy13:
	yych = *++ctx.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy15;
	default:	goto yy13;
	}
yy15:
#line 511 "assembler.yy"
	{ walk(); advance(); }
#line 4698 "assembler.cpp"
yy16:
	yyaccept = 0;
	yych = *(YYMARKER = ++ctx.cursor);
	switch (yych) {
	case '0':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy55;
	case '1':
	case '2':	goto yy57;
	case '3':	goto yy58;
	case 'a':	goto yy59;
	case 'f':
	case 'g':	goto yy61;
	case 'k':
	case 'v':	goto yy62;
	case 'r':	goto yy63;
	case 's':	goto yy64;
	case 't':	goto yy65;
	case 'z':	goto yy66;
	default:	goto yy5;
	}
yy17:
	yyaccept = 0;
	yych = *(YYMARKER = ++ctx.cursor);
	switch (yych) {
	case '\n':	goto yy5;
	case '\\':	goto yy68;
	default:	goto yy67;
	}
yy18:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy22;
	default:	goto yy5;
	}
yy19:
	yyaccept = 0;
	yych = *(YYMARKER = ++ctx.cursor);
	switch (yych) {
	case 'A':	goto yy69;
	case 'B':	goto yy70;
	case 'D':	goto yy71;
	case 'S':	goto yy72;
	case 'T':	goto yy73;
	case 'W':	goto yy74;
	case 'a':	goto yy75;
	case 'b':	goto yy76;
	case 'd':	goto yy77;
	case 's':	goto yy78;
	case 't':	goto yy79;
	case 'w':	goto yy80;
	default:	goto yy5;
	}
yy20:
	yyaccept = 1;
	yych = *(YYMARKER = ++ctx.cursor);
	switch (yych) {
	case 'b':	goto yy81;
	case 'x':	goto yy82;
	default:	goto yy23;
	}
yy21:
#line 497 "assembler.yy"
	{ tokenv(LITERAL, std::stoi(std::string(anchor, ctx.cursor))); }
#line 4776 "assembler.cpp"
yy22:
	yych = *++ctx.cursor;
yy23:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy22;
	default:	goto yy21;
	}
yy24:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'D':	goto yy83;
	case 'N':	goto yy84;
	default:	goto yy31;
	}
yy25:
#line 490 "assembler.yy"
	{ tokenv(IDENTIFIER, std::string(anchor, ctx.cursor)); }
#line 4803 "assembler.cpp"
yy26:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'A':	goto yy85;
	case 'E':	goto yy86;
	case 'G':	goto yy87;
	case 'L':	goto yy88;
	case 'N':	goto yy89;
	default:	goto yy27;
	}
yy27:
#line 475 "assembler.yy"
	{ token(B); }
#line 4875 "assembler.cpp"
yy28:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy90;
	default:	goto yy31;
	}
yy29:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'I':	goto yy91;
	default:	goto yy31;
	}
yy30:
	yych = *++ctx.cursor;
yy31:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy25;
	}
yy32:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'A':	goto yy92;
	case 'R':	goto yy93;
	default:	goto yy33;
	}
yy33:
#line 441 "assembler.yy"
	{ token(J); }
#line 5028 "assembler.cpp"
yy34:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'A':	goto yy95;
	case 'B':	goto yy97;
	case 'I':	goto yy99;
	case 'U':	goto yy101;
	case 'W':	goto yy102;
	default:	goto yy31;
	}
yy35:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'F':	goto yy104;
	case 'O':	goto yy105;
	case 'U':	goto yy106;
	default:	goto yy31;
	}
yy36:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'O':	goto yy107;
	default:	goto yy31;
	}
yy37:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'R':	goto yy108;
	default:	goto yy31;
	}
yy38:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy110;
	default:	goto yy31;
	}
yy39:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'B':	goto yy111;
	case 'L':	goto yy113;
	case 'R':	goto yy114;
	case 'U':	goto yy115;
	case 'W':	goto yy116;
	case 'Y':	goto yy118;
	default:	goto yy31;
	}
yy40:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'O':	goto yy119;
	default:	goto yy31;
	}
yy41:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'd':	goto yy120;
	case 'n':	goto yy121;
	default:	goto yy31;
	}
yy42:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'a':	goto yy122;
	case 'e':	goto yy123;
	case 'g':	goto yy124;
	case 'l':	goto yy125;
	case 'n':	goto yy126;
	default:	goto yy27;
	}
yy43:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy127;
	default:	goto yy31;
	}
yy44:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'i':	goto yy128;
	default:	goto yy31;
	}
yy45:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'a':	goto yy129;
	case 'r':	goto yy93;
	default:	goto yy33;
	}
yy46:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'a':	goto yy95;
	case 'b':	goto yy97;
	case 'i':	goto yy99;
	case 'u':	goto yy130;
	case 'w':	goto yy102;
	default:	goto yy31;
	}
yy47:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'f':	goto yy131;
	case 'o':	goto yy132;
	case 'u':	goto yy133;
	default:	goto yy31;
	}
yy48:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'o':	goto yy134;
	default:	goto yy31;
	}
yy49:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'r':	goto yy135;
	default:	goto yy31;
	}
yy50:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy136;
	default:	goto yy31;
	}
yy51:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'b':	goto yy111;
	case 'l':	goto yy137;
	case 'r':	goto yy138;
	case 'u':	goto yy139;
	case 'w':	goto yy116;
	case 'y':	goto yy140;
	default:	goto yy31;
	}
yy52:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'o':	goto yy141;
	default:	goto yy31;
	}
yy53:
	++ctx.cursor;
#line 503 "assembler.yy"
	{ tokenv(STRING, std::string(anchor + 1, ctx.cursor - 1)); }
#line 5294 "assembler.cpp"
yy55:
	++ctx.cursor;
yy56:
#line 494 "assembler.yy"
	{ tokenv(REGISTER, std::stoi(std::string(anchor + 1, ctx.cursor))); }
#line 5300 "assembler.cpp"
yy57:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy55;
	default:	goto yy56;
	}
yy58:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':	goto yy55;
	default:	goto yy56;
	}
yy59:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case 't':	goto yy142;
	default:	goto yy60;
	}
yy60:
	ctx.cursor = YYMARKER;
	if (yyaccept == 0) {
		goto yy5;
	} else {
		goto yy21;
	}
yy61:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'p':	goto yy142;
	default:	goto yy60;
	}
yy62:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':	goto yy142;
	default:	goto yy60;
	}
yy63:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'a':	goto yy142;
	default:	goto yy60;
	}
yy64:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case 'p':	goto yy142;
	default:	goto yy60;
	}
yy65:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy142;
	default:	goto yy60;
	}
yy66:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy144;
	default:	goto yy60;
	}
yy67:
	yych = *++ctx.cursor;
	switch (yych) {
	case '\'':	goto yy145;
	default:	goto yy60;
	}
yy68:
	yych = *++ctx.cursor;
	switch (yych) {
	case '\n':	goto yy60;
	case '\'':	goto yy147;
	default:	goto yy67;
	}
yy69:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy148;
	case 'S':	goto yy149;
	default:	goto yy60;
	}
yy70:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'Y':	goto yy150;
	default:	goto yy60;
	}
yy71:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'A':	goto yy151;
	default:	goto yy60;
	}
yy72:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'P':	goto yy152;
	default:	goto yy60;
	}
yy73:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy153;
	default:	goto yy60;
	}
yy74:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'O':	goto yy154;
	default:	goto yy60;
	}
yy75:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy155;
	case 's':	goto yy156;
	default:	goto yy60;
	}
yy76:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'y':	goto yy157;
	default:	goto yy60;
	}
yy77:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'a':	goto yy158;
	default:	goto yy60;
	}
yy78:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'p':	goto yy159;
	default:	goto yy60;
	}
yy79:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy160;
	default:	goto yy60;
	}
yy80:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'o':	goto yy161;
	default:	goto yy60;
	}
yy81:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':	goto yy162;
	default:	goto yy60;
	}
yy82:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy165;
	default:	goto yy60;
	}
yy83:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'D':	goto yy168;
	default:	goto yy31;
	}
yy84:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'D':	goto yy170;
	default:	goto yy31;
	}
yy85:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy172;
	default:	goto yy31;
	}
yy86:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'G':	goto yy174;
	case 'Q':	goto yy175;
	default:	goto yy31;
	}
yy87:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy177;
	case 'T':	goto yy179;
	default:	goto yy31;
	}
yy88:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy181;
	case 'T':	goto yy183;
	default:	goto yy31;
	}
yy89:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy185;
	default:	goto yy31;
	}
yy90:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'R':	goto yy187;
	default:	goto yy31;
	}
yy91:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'V':	goto yy189;
	default:	goto yy31;
	}
yy92:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy191;
	default:	goto yy31;
	}
yy93:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy94;
	}
yy94:
#line 443 "assembler.yy"
	{ token(JR); }
#line 5649 "assembler.cpp"
yy95:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy96;
	}
yy96:
#line 485 "assembler.yy"
	{ token(LA); }
#line 5721 "assembler.cpp"
yy97:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy98;
	}
yy98:
#line 444 "assembler.yy"
	{ token(LB); }
#line 5793 "assembler.cpp"
yy99:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy100;
	}
yy100:
#line 484 "assembler.yy"
	{ token(LI); }
#line 5865 "assembler.cpp"
yy101:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'I':	goto yy193;
	default:	goto yy31;
	}
yy102:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy103;
	}
yy103:
#line 446 "assembler.yy"
	{ token(LW); }
#line 5943 "assembler.cpp"
yy104:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'H':	goto yy195;
	case 'L':	goto yy196;
	default:	goto yy31;
	}
yy105:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'V':	goto yy197;
	default:	goto yy31;
	}
yy106:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy199;
	default:	goto yy31;
	}
yy107:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'P':	goto yy200;
	case 'R':	goto yy202;
	case 'T':	goto yy204;
	default:	goto yy31;
	}
yy108:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'I':	goto yy206;
	default:	goto yy109;
	}
yy109:
#line 451 "assembler.yy"
	{ token(OR); }
#line 6042 "assembler.cpp"
yy110:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'M':	goto yy208;
	default:	goto yy31;
	}
yy111:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy112;
	}
yy112:
#line 453 "assembler.yy"
	{ token(SB); }
#line 6120 "assembler.cpp"
yy113:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy210;
	case 'T':	goto yy212;
	default:	goto yy31;
	}
yy114:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'A':	goto yy214;
	case 'L':	goto yy216;
	default:	goto yy31;
	}
yy115:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'B':	goto yy218;
	default:	goto yy31;
	}
yy116:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy117;
	}
yy117:
#line 465 "assembler.yy"
	{ token(SW); }
#line 6212 "assembler.cpp"
yy118:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'S':	goto yy220;
	default:	goto yy31;
	}
yy119:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'R':	goto yy222;
	default:	goto yy31;
	}
yy120:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'd':	goto yy224;
	default:	goto yy31;
	}
yy121:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'd':	goto yy225;
	default:	goto yy31;
	}
yy122:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy172;
	default:	goto yy31;
	}
yy123:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'g':	goto yy226;
	case 'q':	goto yy175;
	default:	goto yy31;
	}
yy124:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy227;
	case 't':	goto yy228;
	default:	goto yy31;
	}
yy125:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy229;
	case 't':	goto yy230;
	default:	goto yy31;
	}
yy126:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy185;
	default:	goto yy31;
	}
yy127:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'r':	goto yy187;
	default:	goto yy31;
	}
yy128:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'v':	goto yy231;
	default:	goto yy31;
	}
yy129:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy232;
	default:	goto yy31;
	}
yy130:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'i':	goto yy193;
	default:	goto yy31;
	}
yy131:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'h':	goto yy233;
	case 'l':	goto yy234;
	default:	goto yy31;
	}
yy132:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'v':	goto yy197;
	default:	goto yy31;
	}
yy133:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy235;
	default:	goto yy31;
	}
yy134:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'p':	goto yy200;
	case 'r':	goto yy202;
	case 't':	goto yy204;
	default:	goto yy31;
	}
yy135:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'i':	goto yy206;
	default:	goto yy109;
	}
yy136:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'm':	goto yy208;
	default:	goto yy31;
	}
yy137:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy236;
	case 't':	goto yy237;
	default:	goto yy31;
	}
yy138:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'a':	goto yy214;
	case 'l':	goto yy238;
	default:	goto yy31;
	}
yy139:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'b':	goto yy239;
	default:	goto yy31;
	}
yy140:
	yych = *++ctx.cursor;
	switch (yych) {
	case 's':	goto yy220;
	default:	goto yy31;
	}
yy141:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'r':	goto yy240;
	default:	goto yy31;
	}
yy142:
	++ctx.cursor;
#line 493 "assembler.yy"
	{ tokenv(REGISTER, resolveRegisterName(std::string(anchor + 1, ctx.cursor))); }
#line 6431 "assembler.cpp"
yy144:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'r':	goto yy241;
	default:	goto yy60;
	}
yy145:
	++ctx.cursor;
yy146:
#line 500 "assembler.yy"
	{ tokenv(LITERAL, anchor[1]); }
#line 6443 "assembler.cpp"
yy147:
	yych = *++ctx.cursor;
	switch (yych) {
	case '\'':	goto yy145;
	default:	goto yy146;
	}
yy148:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'I':	goto yy242;
	default:	goto yy60;
	}
yy149:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'C':	goto yy243;
	default:	goto yy60;
	}
yy150:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'T':	goto yy244;
	default:	goto yy60;
	}
yy151:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'T':	goto yy245;
	default:	goto yy60;
	}
yy152:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'A':	goto yy246;
	default:	goto yy60;
	}
yy153:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'X':	goto yy247;
	default:	goto yy60;
	}
yy154:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'R':	goto yy248;
	default:	goto yy60;
	}
yy155:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'i':	goto yy249;
	default:	goto yy60;
	}
yy156:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'c':	goto yy250;
	default:	goto yy60;
	}
yy157:
	yych = *++ctx.cursor;
	switch (yych) {
	case 't':	goto yy251;
	default:	goto yy60;
	}
yy158:
	yych = *++ctx.cursor;
	switch (yych) {
	case 't':	goto yy252;
	default:	goto yy60;
	}
yy159:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'a':	goto yy253;
	default:	goto yy60;
	}
yy160:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'x':	goto yy254;
	default:	goto yy60;
	}
yy161:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'r':	goto yy255;
	default:	goto yy60;
	}
yy162:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':	goto yy162;
	default:	goto yy164;
	}
yy164:
#line 498 "assembler.yy"
	{ tokenv(LITERAL, std::stoi(std::string(anchor, ctx.cursor))); }
#line 6544 "assembler.cpp"
yy165:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy165;
	default:	goto yy167;
	}
yy167:
#line 499 "assembler.yy"
	{ tokenv(LITERAL, std::stoi(std::string(anchor, ctx.cursor))); }
#line 6575 "assembler.cpp"
yy168:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'I':	goto yy256;
	case 'U':	goto yy258;
	default:	goto yy169;
	}
yy169:
#line 425 "assembler.yy"
	{ token(ADD); }
#line 6647 "assembler.cpp"
yy170:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'I':	goto yy260;
	default:	goto yy171;
	}
yy171:
#line 429 "assembler.yy"
	{ token(AND); }
#line 6719 "assembler.cpp"
yy172:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy173;
	}
yy173:
#line 476 "assembler.yy"
	{ token(BAL); }
#line 6791 "assembler.cpp"
yy174:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'Z':	goto yy262;
	default:	goto yy31;
	}
yy175:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy176;
	}
yy176:
#line 431 "assembler.yy"
	{ token(BEQ); }
#line 6869 "assembler.cpp"
yy177:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'Z':	goto yy264;
	default:	goto yy178;
	}
yy178:
#line 479 "assembler.yy"
	{ token(BGE); }
#line 6941 "assembler.cpp"
yy179:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'U':	goto yy266;
	case 'Z':	goto yy268;
	default:	goto yy180;
	}
yy180:
#line 477 "assembler.yy"
	{ token(BGT); }
#line 7013 "assembler.cpp"
yy181:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'Z':	goto yy270;
	default:	goto yy182;
	}
yy182:
#line 480 "assembler.yy"
	{ token(BLE); }
#line 7085 "assembler.cpp"
yy183:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'Z':	goto yy272;
	default:	goto yy184;
	}
yy184:
#line 478 "assembler.yy"
	{ token(BLT); }
#line 7157 "assembler.cpp"
yy185:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy186;
	}
yy186:
#line 438 "assembler.yy"
	{ token(BNE); }
#line 7229 "assembler.cpp"
yy187:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy188;
	}
yy188:
#line 474 "assembler.yy"
	{ token(CLR); }
#line 7301 "assembler.cpp"
yy189:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'U':	goto yy274;
	default:	goto yy190;
	}
yy190:
#line 439 "assembler.yy"
	{ token(DIV); }
#line 7373 "assembler.cpp"
yy191:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'R':	goto yy276;
	default:	goto yy192;
	}
yy192:
#line 442 "assembler.yy"
	{ token(JAL); }
#line 7445 "assembler.cpp"
yy193:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy194;
	}
yy194:
#line 445 "assembler.yy"
	{ token(LUI); }
#line 7517 "assembler.cpp"
yy195:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'I':	goto yy278;
	default:	goto yy31;
	}
yy196:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'O':	goto yy280;
	default:	goto yy31;
	}
yy197:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy198;
	}
yy198:
#line 473 "assembler.yy"
	{ token(MOV); }
#line 7601 "assembler.cpp"
yy199:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'T':	goto yy282;
	default:	goto yy31;
	}
yy200:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy201;
	}
yy201:
#line 486 "assembler.yy"
	{ token(NOP); }
#line 7679 "assembler.cpp"
yy202:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy203;
	}
yy203:
#line 470 "assembler.yy"
	{ token(NOR); }
#line 7751 "assembler.cpp"
yy204:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy205;
	}
yy205:
#line 487 "assembler.yy"
	{ token(NOT); }
#line 7823 "assembler.cpp"
yy206:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy207;
	}
yy207:
#line 452 "assembler.yy"
	{ token(ORI); }
#line 7895 "assembler.cpp"
yy208:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy209;
	}
yy209:
#line 483 "assembler.yy"
	{ token(REM); }
#line 7967 "assembler.cpp"
yy210:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'V':	goto yy284;
	default:	goto yy211;
	}
yy211:
#line 454 "assembler.yy"
	{ token(SLL); }
#line 8039 "assembler.cpp"
yy212:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'I':	goto yy286;
	case 'U':	goto yy288;
	default:	goto yy213;
	}
yy213:
#line 456 "assembler.yy"
	{ token(SLT); }
#line 8111 "assembler.cpp"
yy214:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy215;
	}
yy215:
#line 460 "assembler.yy"
	{ token(SRA); }
#line 8183 "assembler.cpp"
yy216:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'V':	goto yy290;
	default:	goto yy217;
	}
yy217:
#line 461 "assembler.yy"
	{ token(SRL); }
#line 8255 "assembler.cpp"
yy218:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'U':	goto yy292;
	default:	goto yy219;
	}
yy219:
#line 463 "assembler.yy"
	{ token(SUB); }
#line 8327 "assembler.cpp"
yy220:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy221;
	}
yy221:
#line 466 "assembler.yy"
	{ token(SYS); }
#line 8399 "assembler.cpp"
yy222:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'I':	goto yy294;
	default:	goto yy223;
	}
yy223:
#line 467 "assembler.yy"
	{ token(XOR); }
#line 8471 "assembler.cpp"
yy224:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'i':	goto yy296;
	case 'u':	goto yy258;
	default:	goto yy169;
	}
yy225:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'i':	goto yy260;
	default:	goto yy171;
	}
yy226:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'z':	goto yy262;
	default:	goto yy31;
	}
yy227:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':	goto yy30;
	case 'z':	goto yy297;
	default:	goto yy178;
	}
yy228:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':	goto yy30;
	case 'u':	goto yy266;
	case 'z':	goto yy268;
	default:	goto yy180;
	}
yy229:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':	goto yy30;
	case 'z':	goto yy270;
	default:	goto yy182;
	}
yy230:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':	goto yy30;
	case 'z':	goto yy298;
	default:	goto yy184;
	}
yy231:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'u':	goto yy274;
	default:	goto yy190;
	}
yy232:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'r':	goto yy276;
	default:	goto yy192;
	}
yy233:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'i':	goto yy278;
	default:	goto yy31;
	}
yy234:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'o':	goto yy280;
	default:	goto yy31;
	}
yy235:
	yych = *++ctx.cursor;
	switch (yych) {
	case 't':	goto yy299;
	default:	goto yy31;
	}
yy236:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'v':	goto yy284;
	default:	goto yy211;
	}
yy237:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'i':	goto yy300;
	case 'u':	goto yy288;
	default:	goto yy213;
	}
yy238:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'v':	goto yy290;
	default:	goto yy217;
	}
yy239:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'u':	goto yy292;
	default:	goto yy219;
	}
yy240:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'i':	goto yy294;
	default:	goto yy223;
	}
yy241:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'o':	goto yy142;
	default:	goto yy60;
	}
yy242:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'G':	goto yy301;
	default:	goto yy60;
	}
yy243:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'I':	goto yy302;
	default:	goto yy60;
	}
yy244:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy303;
	default:	goto yy60;
	}
yy245:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'A':	goto yy305;
	default:	goto yy60;
	}
yy246:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'C':	goto yy307;
	default:	goto yy60;
	}
yy247:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'T':	goto yy308;
	default:	goto yy60;
	}
yy248:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'D':	goto yy310;
	default:	goto yy60;
	}
yy249:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'g':	goto yy312;
	default:	goto yy60;
	}
yy250:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'i':	goto yy313;
	default:	goto yy60;
	}
yy251:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy303;
	default:	goto yy60;
	}
yy252:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'a':	goto yy305;
	default:	goto yy60;
	}
yy253:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'c':	goto yy314;
	default:	goto yy60;
	}
yy254:
	yych = *++ctx.cursor;
	switch (yych) {
	case 't':	goto yy308;
	default:	goto yy60;
	}
yy255:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'd':	goto yy310;
	default:	goto yy60;
	}
yy256:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'U':	goto yy315;
	default:	goto yy257;
	}
yy257:
#line 426 "assembler.yy"
	{ token(ADDI); }
#line 9541 "assembler.cpp"
yy258:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy259;
	}
yy259:
#line 428 "assembler.yy"
	{ token(ADDU); }
#line 9613 "assembler.cpp"
yy260:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy261;
	}
yy261:
#line 430 "assembler.yy"
	{ token(ANDI); }
#line 9685 "assembler.cpp"
yy262:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy263;
	}
yy263:
#line 482 "assembler.yy"
	{ token(BEGZ); }
#line 9757 "assembler.cpp"
yy264:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'A':	goto yy317;
	default:	goto yy265;
	}
yy265:
#line 432 "assembler.yy"
	{ token(BGEZ); }
#line 9829 "assembler.cpp"
yy266:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy267;
	}
yy267:
#line 481 "assembler.yy"
	{ token(BGTU); }
#line 9901 "assembler.cpp"
yy268:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy269;
	}
yy269:
#line 434 "assembler.yy"
	{ token(BGTZ); }
#line 9973 "assembler.cpp"
yy270:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy271;
	}
yy271:
#line 435 "assembler.yy"
	{ token(BLEZ); }
#line 10045 "assembler.cpp"
yy272:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'A':	goto yy318;
	default:	goto yy273;
	}
yy273:
#line 436 "assembler.yy"
	{ token(BLTZ); }
#line 10117 "assembler.cpp"
yy274:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy275;
	}
yy275:
#line 440 "assembler.yy"
	{ token(DIVU); }
#line 10189 "assembler.cpp"
yy276:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy277;
	}
yy277:
#line 469 "assembler.yy"
	{ token(JALR); }
#line 10261 "assembler.cpp"
yy278:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy279;
	}
yy279:
#line 447 "assembler.yy"
	{ token(MFHI); }
#line 10333 "assembler.cpp"
yy280:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy281;
	}
yy281:
#line 448 "assembler.yy"
	{ token(MFLO); }
#line 10405 "assembler.cpp"
yy282:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'U':	goto yy319;
	default:	goto yy283;
	}
yy283:
#line 449 "assembler.yy"
	{ token(MULT); }
#line 10477 "assembler.cpp"
yy284:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy285;
	}
yy285:
#line 455 "assembler.yy"
	{ token(SLLV); }
#line 10549 "assembler.cpp"
yy286:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'U':	goto yy321;
	default:	goto yy287;
	}
yy287:
#line 457 "assembler.yy"
	{ token(SLTI); }
#line 10621 "assembler.cpp"
yy288:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy289;
	}
yy289:
#line 459 "assembler.yy"
	{ token(SLTU); }
#line 10693 "assembler.cpp"
yy290:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy291;
	}
yy291:
#line 462 "assembler.yy"
	{ token(SRLV); }
#line 10765 "assembler.cpp"
yy292:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy293;
	}
yy293:
#line 464 "assembler.yy"
	{ token(SUBU); }
#line 10837 "assembler.cpp"
yy294:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy295;
	}
yy295:
#line 468 "assembler.yy"
	{ token(XORI); }
#line 10909 "assembler.cpp"
yy296:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'u':	goto yy315;
	default:	goto yy257;
	}
yy297:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'a':	goto yy323;
	default:	goto yy265;
	}
yy298:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'a':	goto yy324;
	default:	goto yy273;
	}
yy299:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'u':	goto yy319;
	default:	goto yy283;
	}
yy300:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	case 'u':	goto yy321;
	default:	goto yy287;
	}
yy301:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'N':	goto yy325;
	default:	goto yy60;
	}
yy302:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'I':	goto yy327;
	default:	goto yy60;
	}
yy303:
	++ctx.cursor;
#line 418 "assembler.yy"
	{ token(BYTE); }
#line 11266 "assembler.cpp"
yy305:
	++ctx.cursor;
#line 416 "assembler.yy"
	{ token(DATA); }
#line 11271 "assembler.cpp"
yy307:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'E':	goto yy329;
	default:	goto yy60;
	}
yy308:
	++ctx.cursor;
#line 415 "assembler.yy"
	{ token(TEXT); }
#line 11282 "assembler.cpp"
yy310:
	++ctx.cursor;
#line 417 "assembler.yy"
	{ token(WORD); }
#line 11287 "assembler.cpp"
yy312:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'n':	goto yy325;
	default:	goto yy60;
	}
yy313:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'i':	goto yy331;
	default:	goto yy60;
	}
yy314:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'e':	goto yy329;
	default:	goto yy60;
	}
yy315:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy316;
	}
yy316:
#line 427 "assembler.yy"
	{ token(ADDIU); }
#line 11377 "assembler.cpp"
yy317:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy332;
	default:	goto yy31;
	}
yy318:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'L':	goto yy334;
	default:	goto yy31;
	}
yy319:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy320;
	}
yy320:
#line 450 "assembler.yy"
	{ token(MULTU); }
#line 11461 "assembler.cpp"
yy321:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy322;
	}
yy322:
#line 458 "assembler.yy"
	{ token(SLTIU); }
#line 11533 "assembler.cpp"
yy323:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy332;
	default:	goto yy31;
	}
yy324:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'l':	goto yy334;
	default:	goto yy31;
	}
yy325:
	++ctx.cursor;
#line 421 "assembler.yy"
	{ token(ALIGN); }
#line 11550 "assembler.cpp"
yy327:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'Z':	goto yy336;
	default:	goto yy328;
	}
yy328:
#line 419 "assembler.yy"
	{ token(ASCII); }
#line 11560 "assembler.cpp"
yy329:
	++ctx.cursor;
#line 422 "assembler.yy"
	{ token(SPACE); }
#line 11565 "assembler.cpp"
yy331:
	yych = *++ctx.cursor;
	switch (yych) {
	case 'z':	goto yy336;
	default:	goto yy328;
	}
yy332:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy333;
	}
yy333:
#line 433 "assembler.yy"
	{ token(BGEZAL); }
#line 11643 "assembler.cpp"
yy334:
	yych = *++ctx.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy30;
	default:	goto yy335;
	}
yy335:
#line 437 "assembler.yy"
	{ token(BLTZAL); }
#line 11715 "assembler.cpp"
yy336:
	++ctx.cursor;
#line 420 "assembler.yy"
	{ token(ASCIIZ); }
#line 11720 "assembler.cpp"
}
#line 515 "assembler.yy"

}

void yy::parser::error(const location_type& l, const std::string& message)
{
    std::cerr << l.begin.filename->c_str() << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << message << '\n';
}

namespace kasm
{
    void Assembler::assemble(const std::string& asmPath, const std::string& programPath)
    {
        labelLocations.clear();
        unresolvedAddressLocations.clear();

        std::ifstream asmFile(asmPath);
		binary.open(programPath);

        std::string sourceCode;
        asmFile.seekg(0, std::ios::end);
        sourceCode.reserve(asmFile.tellg());
        asmFile.seekg(0, std::ios::beg);

        sourceCode.assign((std::istreambuf_iterator<char>(asmFile)),
            std::istreambuf_iterator<char>());
        
        lexcontext ctx;
		std::string fileName = asmPath;
		ctx.loc.begin.filename = &fileName;
    	ctx.loc.end.filename   = &fileName;
        ctx.cursor = sourceCode.c_str();
		ctx.assembler = this;
        yy::parser parser(ctx);
        parser.parse();

        for (UnresolvedAddressLocation unresolvedAddressLocation : unresolvedAddressLocations)
        {
			binary.setLocation(unresolvedAddressLocation.location);
			std::uint32_t instruction = unresolvedAddressLocation.address.instructionData.instruction;

			instruction = resolveAddress(MUST_RESOLVE, unresolvedAddressLocation.address);

			if (unresolvedAddressLocation.address.type == AddressType::DirectAddressAbsoluteByte)
			{
				std::cout << "Label Resolved: " << unresolvedAddressLocation.address.label << " to " << instruction << std::endl;
				binary.writeByte(static_cast<std::uint8_t>(instruction));
			}
			else if (unresolvedAddressLocation.address.type == AddressType::DirectAddressAbsoluteLoad)
			{
				std::cout << "Label Resolved: " << unresolvedAddressLocation.address.label << " to " << instruction << std::endl;
				SplitWord l = { instruction };
				INSTRUCTION_RL(LUI, unresolvedAddressLocation.address.reg, l.hi);
				INSTRUCTION_RRL(ORI, unresolvedAddressLocation.address.reg, unresolvedAddressLocation.address.reg, l.lo);
			}
			else
			{
				std::cout << "Label Resolved: " << unresolvedAddressLocation.address.label << "+" << unresolvedAddressLocation.address.offset << "(" << unresolvedAddressLocation.address.reg << ") @ " << (instruction & 0xFFFF) << std::endl;
				binary.writeWord(instruction);
			}
        }

        binary.setLocation(BinaryBuilder::END);
        binary.align(INSTRUCTION_SIZE);
		binary.close();
    }

    std::uint32_t Assembler::resolveAddress(std::uint32_t instructionLocation, Address address)
    {
		if (address.label == "")
		{
			switch (address.type)
			{
			case AddressType::DirectAddressAbsolute:
				address.instructionData.directAddressAbsolute = address.offset;
				return address.instructionData.instruction;
			case AddressType::IndirectAddressAbsolute:
				address.instructionData.register1 = address.reg;
				address.instructionData.directAddressOffset = address.offset;
				return address.instructionData.instruction;
			case AddressType::DirectAddressOffset:
				address.instructionData.directAddressOffset = address.offset;
				return address.instructionData.instruction;
			default:
				break;
			}
		}
		else if (labelLocations.count(address.label))
        {
			switch (address.type)
			{
			case AddressType::DirectAddressAbsolute:
				address.instructionData.directAddressAbsolute = labelLocations.at(address.label) + address.offset;
				return address.instructionData.instruction;
			case AddressType::IndirectAddressAbsolute:
				address.instructionData.register1 = address.reg;
				address.instructionData.directAddressOffset = labelLocations.at(address.label) + address.offset;
				return address.instructionData.instruction;
			case AddressType::DirectAddressOffset:
				address.instructionData.directAddressOffset = labelLocations.at(address.label) + address.offset;
				return address.instructionData.instruction;
			case AddressType::DirectAddressAbsoluteWord:
			case AddressType::DirectAddressAbsoluteByte:
			case AddressType::DirectAddressAbsoluteLoad:
				return labelLocations.at(address.label) + address.offset;
			default:
				break;
			}
		}
		else if (instructionLocation == MUST_RESOLVE)
		{
                throw std::exception(std::string("Unresolved Label: " + address.label).c_str());
		}


		std::cout << "Label Unresolved: " << address.label << "+" << address.offset << "(" << address.reg << ") @ " << instructionLocation << std::endl;
        unresolvedAddressLocations.push_back({ instructionLocation, address });
        return address.instructionData.instruction;
    }

	void Assembler::defineLabel(const std::string& name, std::uint32_t location)
	{
		if (labelLocations.count(name))
		{
            throw std::exception(std::string("Redefined Label: " + name).c_str());
		}
		else
		{
			std::cout << "Label Defined: " << name << " @ " << location << std::endl;
			labelLocations[name] = location;
		}
	}
}
